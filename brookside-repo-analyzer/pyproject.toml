[tool.poetry]
name = "brookside-repo-analyzer"
version = "0.1.0"
description = "Analyzes brookside-bi GitHub repositories and syncs knowledge to Notion Innovation Nexus"
authors = ["Alec Fielding <alec@brooksidebi.com>", "Markus Ahling <markus@brooksidebi.com>"]
readme = "README.md"
homepage = "https://github.com/brookside-bi/repo-analyzer"
repository = "https://github.com/brookside-bi/repo-analyzer"
keywords = ["github", "notion", "repository-analysis", "automation", "innovation-management"]
packages = [{include = "src"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Quality Assurance",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.11"
click = "^8.1.7"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
azure-keyvault-secrets = "^4.7.0"
azure-identity = "^1.15.0"
pyyaml = "^6.0.1"
rich = "^13.7.0"
httpx = "^0.25.2"
aiofiles = "^23.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.0"
ruff = "^0.1.8"
mypy = "^1.7.1"
pre-commit = "^3.6.0"

[tool.poetry.group.azure.dependencies]
azure-functions = "^1.18.0"

[tool.poetry.scripts]
brookside-analyze = "src.cli:cli"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
