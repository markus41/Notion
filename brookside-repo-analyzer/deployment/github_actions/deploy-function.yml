name: Deploy to Azure Functions

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'deployment/azure_function/**'
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Establish automated deployment to streamline function updates
# Best for: Organizations requiring rapid, reliable Azure Function deployment

env:
  AZURE_FUNCTIONAPP_NAME: 'func-repo-analyzer'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build Function Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0

      - name: Install dependencies
        run: |
          cd deployment/azure_function
          pip install -r requirements.txt --target=".python_packages/lib/site-packages"

      - name: Copy source code
        run: |
          cp -r src deployment/azure_function/
          cp -r deployment/azure_function/* .azure_function_build/

      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v3
        with:
          name: function-package
          path: deployment/azure_function/

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: function-package
          path: ./function-package

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ./function-package
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Verify deployment
        run: |
          # Wait for deployment to propagate
          sleep 30

          # Test health endpoint
          FUNCTION_URL="https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"

          echo "Testing health endpoint: $FUNCTION_URL/api/health"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_URL/api/health")

          if [ "$RESPONSE" == "200" ]; then
            echo "✅ Health check passed (HTTP $RESPONSE)"
          else
            echo "❌ Health check failed (HTTP $RESPONSE)"
            exit 1
          fi

      - name: Post-deployment validation
        run: |
          # Verify function app settings
          az functionapp config appsettings list \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group rg-brookside-prod \
            --output table

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
      - name: Report deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
            echo "Function URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
          else
            echo "❌ Deployment failed"
            exit 1
          fi

      - name: Create deployment tag
        if: needs.deploy.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `deploy-${new Date().toISOString().split('T')[0]}`;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });
