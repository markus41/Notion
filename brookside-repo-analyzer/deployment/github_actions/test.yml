name: Test & Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# Establish comprehensive quality assurance to ensure code reliability
# Best for: Organizations requiring automated validation before deployment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Black (formatting check)
        run: poetry run black --check src/ tests/

      - name: Run Ruff (linting)
        run: poetry run ruff check src/ tests/

      - name: Run mypy (type checking)
        run: poetry run mypy src/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run on main branch or manually triggered
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run integration tests
        env:
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GITHUB_ORG: ${{ secrets.GITHUB_ORG }}
          NOTION_WORKSPACE_ID: ${{ secrets.NOTION_WORKSPACE_ID }}
        run: |
          poetry run pytest tests/integration/ -v \
            --cov=src \
            --cov-report=xml

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.0

      - name: Build package
        run: poetry build

      - name: Verify wheel
        run: |
          pip install dist/*.whl
          python -c "import src; print('Package installed successfully')"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, integration-tests, security-scan, build-validation]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Tests or linting failed"
            exit 1
          else
            echo "✅ All quality checks passed"
          fi
