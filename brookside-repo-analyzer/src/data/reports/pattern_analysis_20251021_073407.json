{
  "timestamp": "2025-10-21T07:34:07.031230",
  "total_repositories_analyzed": 15,
  "total_patterns_identified": 7,
  "average_reusability_score": 56.6,
  "patterns_by_type": {
    "ARCHITECTURAL": 1,
    "INTEGRATION": 2,
    "DESIGN": 4
  },
  "top_10_patterns": [
    {
      "name": "Serverless Architecture",
      "type": "ARCHITECTURAL",
      "description": "Event-driven serverless compute using Azure Functions for scalable, cost-effective execution",
      "repos_using": [
        "repo-analyzer",
        "azure-webhook-handler",
        "scheduled-batch-processor",
        "teams-notification-bot"
      ],
      "usage_count": 4,
      "reusability_score": 68,
      "microsoft_technology": "Azure Functions",
      "benefits": [
        "No infrastructure management",
        "Pay-per-execution pricing model",
        "Auto-scaling based on demand",
        "Integrated with Azure ecosystem"
      ],
      "considerations": [
        "Cold start latency",
        "Execution time limits",
        "State management complexity"
      ]
    },
    {
      "name": "pytest Testing Framework",
      "type": "DESIGN",
      "description": "Automated testing using pytest for quality assurance",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "cost-tracker-api",
        "azure-webhook-handler",
        "innovation-nexus",
        "azure-openai-wrapper",
        "scheduled-batch-processor",
        "sharepoint-connector",
        "data-pipeline-orchestrator",
        "teams-notification-bot"
      ],
      "usage_count": 10,
      "reusability_score": 66,
      "benefits": [
        "Automated quality checks",
        "Regression prevention",
        "Confidence in deployments"
      ],
      "considerations": [
        "Test maintenance overhead",
        "Coverage goals and standards"
      ]
    },
    {
      "name": "Azure Key Vault Integration Pattern",
      "type": "INTEGRATION",
      "description": "Integration with Azure Key Vault for enterprise capabilities",
      "repos_using": [
        "repo-analyzer",
        "cost-tracker-api",
        "innovation-nexus",
        "azure-openai-wrapper"
      ],
      "usage_count": 4,
      "reusability_score": 63,
      "microsoft_technology": "Azure Key Vault",
      "benefits": [
        "Proven integration pattern",
        "Enterprise-grade capabilities",
        "Centralized management"
      ],
      "considerations": [
        "Authentication management",
        "Rate limiting",
        "Cost optimization"
      ]
    },
    {
      "name": "Pydantic Type Validation",
      "type": "DESIGN",
      "description": "Runtime type validation and data modeling using Pydantic",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "cost-tracker-api",
        "azure-webhook-handler",
        "innovation-nexus",
        "azure-openai-wrapper",
        "data-pipeline-orchestrator"
      ],
      "usage_count": 7,
      "reusability_score": 58,
      "benefits": [
        "Type safety at runtime",
        "Data quality enforcement",
        "Self-documenting schemas"
      ],
      "considerations": [
        "Performance impact of validation",
        "Schema evolution management"
      ]
    },
    {
      "name": "Notion MCP Integration Pattern",
      "type": "INTEGRATION",
      "description": "Integration with Notion MCP for enterprise capabilities",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "innovation-nexus"
      ],
      "usage_count": 3,
      "reusability_score": 49,
      "microsoft_technology": null,
      "benefits": [
        "Proven integration pattern",
        "Enterprise-grade capabilities",
        "Scalable service"
      ],
      "considerations": [
        "Authentication management",
        "Rate limiting",
        "Vendor dependency"
      ]
    },
    {
      "name": "Jest Testing Framework",
      "type": "DESIGN",
      "description": "Automated testing using Jest for quality assurance",
      "repos_using": [
        "data-validation-service",
        "powerbi-embed-toolkit",
        "github-mcp-server",
        "api-gateway-service"
      ],
      "usage_count": 4,
      "reusability_score": 48,
      "benefits": [
        "Automated quality checks",
        "Regression prevention",
        "Confidence in deployments"
      ],
      "considerations": [
        "Test maintenance overhead",
        "Coverage goals and standards"
      ]
    },
    {
      "name": "Express.js Web Framework",
      "type": "DESIGN",
      "description": "RESTful API development using Express.js for scalable web services",
      "repos_using": [
        "data-validation-service",
        "api-gateway-service",
        "api-gateway-service"
      ],
      "usage_count": 3,
      "reusability_score": 44,
      "benefits": [
        "Proven framework with strong community",
        "Type safety and validation",
        "Fast development velocity"
      ],
      "considerations": [
        "Learning curve for new developers",
        "Framework-specific conventions"
      ]
    }
  ],
  "all_patterns": [
    {
      "name": "Serverless Architecture",
      "type": "ARCHITECTURAL",
      "description": "Event-driven serverless compute using Azure Functions for scalable, cost-effective execution",
      "repos_using": [
        "repo-analyzer",
        "azure-webhook-handler",
        "scheduled-batch-processor",
        "teams-notification-bot"
      ],
      "usage_count": 4,
      "reusability_score": 68,
      "microsoft_technology": "Azure Functions",
      "benefits": [
        "No infrastructure management",
        "Pay-per-execution pricing model",
        "Auto-scaling based on demand",
        "Integrated with Azure ecosystem"
      ],
      "considerations": [
        "Cold start latency",
        "Execution time limits",
        "State management complexity"
      ]
    },
    {
      "name": "pytest Testing Framework",
      "type": "DESIGN",
      "description": "Automated testing using pytest for quality assurance",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "cost-tracker-api",
        "azure-webhook-handler",
        "innovation-nexus",
        "azure-openai-wrapper",
        "scheduled-batch-processor",
        "sharepoint-connector",
        "data-pipeline-orchestrator",
        "teams-notification-bot"
      ],
      "usage_count": 10,
      "reusability_score": 66,
      "benefits": [
        "Automated quality checks",
        "Regression prevention",
        "Confidence in deployments"
      ],
      "considerations": [
        "Test maintenance overhead",
        "Coverage goals and standards"
      ]
    },
    {
      "name": "Azure Key Vault Integration Pattern",
      "type": "INTEGRATION",
      "description": "Integration with Azure Key Vault for enterprise capabilities",
      "repos_using": [
        "repo-analyzer",
        "cost-tracker-api",
        "innovation-nexus",
        "azure-openai-wrapper"
      ],
      "usage_count": 4,
      "reusability_score": 63,
      "microsoft_technology": "Azure Key Vault",
      "benefits": [
        "Proven integration pattern",
        "Enterprise-grade capabilities",
        "Centralized management"
      ],
      "considerations": [
        "Authentication management",
        "Rate limiting",
        "Cost optimization"
      ]
    },
    {
      "name": "Pydantic Type Validation",
      "type": "DESIGN",
      "description": "Runtime type validation and data modeling using Pydantic",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "cost-tracker-api",
        "azure-webhook-handler",
        "innovation-nexus",
        "azure-openai-wrapper",
        "data-pipeline-orchestrator"
      ],
      "usage_count": 7,
      "reusability_score": 58,
      "benefits": [
        "Type safety at runtime",
        "Data quality enforcement",
        "Self-documenting schemas"
      ],
      "considerations": [
        "Performance impact of validation",
        "Schema evolution management"
      ]
    },
    {
      "name": "Notion MCP Integration Pattern",
      "type": "INTEGRATION",
      "description": "Integration with Notion MCP for enterprise capabilities",
      "repos_using": [
        "repo-analyzer",
        "notion-sync-engine",
        "innovation-nexus"
      ],
      "usage_count": 3,
      "reusability_score": 49,
      "microsoft_technology": null,
      "benefits": [
        "Proven integration pattern",
        "Enterprise-grade capabilities",
        "Scalable service"
      ],
      "considerations": [
        "Authentication management",
        "Rate limiting",
        "Vendor dependency"
      ]
    },
    {
      "name": "Jest Testing Framework",
      "type": "DESIGN",
      "description": "Automated testing using Jest for quality assurance",
      "repos_using": [
        "data-validation-service",
        "powerbi-embed-toolkit",
        "github-mcp-server",
        "api-gateway-service"
      ],
      "usage_count": 4,
      "reusability_score": 48,
      "benefits": [
        "Automated quality checks",
        "Regression prevention",
        "Confidence in deployments"
      ],
      "considerations": [
        "Test maintenance overhead",
        "Coverage goals and standards"
      ]
    },
    {
      "name": "Express.js Web Framework",
      "type": "DESIGN",
      "description": "RESTful API development using Express.js for scalable web services",
      "repos_using": [
        "data-validation-service",
        "api-gateway-service",
        "api-gateway-service"
      ],
      "usage_count": 3,
      "reusability_score": 44,
      "benefits": [
        "Proven framework with strong community",
        "Type safety and validation",
        "Fast development velocity"
      ],
      "considerations": [
        "Learning curve for new developers",
        "Framework-specific conventions"
      ]
    }
  ],
  "patterns_grouped": {
    "ARCHITECTURAL": [
      {
        "name": "Serverless Architecture",
        "type": "ARCHITECTURAL",
        "description": "Event-driven serverless compute using Azure Functions for scalable, cost-effective execution",
        "repos_using": [
          "repo-analyzer",
          "azure-webhook-handler",
          "scheduled-batch-processor",
          "teams-notification-bot"
        ],
        "usage_count": 4,
        "reusability_score": 68,
        "microsoft_technology": "Azure Functions",
        "benefits": [
          "No infrastructure management",
          "Pay-per-execution pricing model",
          "Auto-scaling based on demand",
          "Integrated with Azure ecosystem"
        ],
        "considerations": [
          "Cold start latency",
          "Execution time limits",
          "State management complexity"
        ]
      }
    ],
    "DESIGN": [
      {
        "name": "pytest Testing Framework",
        "type": "DESIGN",
        "description": "Automated testing using pytest for quality assurance",
        "repos_using": [
          "repo-analyzer",
          "notion-sync-engine",
          "cost-tracker-api",
          "azure-webhook-handler",
          "innovation-nexus",
          "azure-openai-wrapper",
          "scheduled-batch-processor",
          "sharepoint-connector",
          "data-pipeline-orchestrator",
          "teams-notification-bot"
        ],
        "usage_count": 10,
        "reusability_score": 66,
        "benefits": [
          "Automated quality checks",
          "Regression prevention",
          "Confidence in deployments"
        ],
        "considerations": [
          "Test maintenance overhead",
          "Coverage goals and standards"
        ]
      },
      {
        "name": "Pydantic Type Validation",
        "type": "DESIGN",
        "description": "Runtime type validation and data modeling using Pydantic",
        "repos_using": [
          "repo-analyzer",
          "notion-sync-engine",
          "cost-tracker-api",
          "azure-webhook-handler",
          "innovation-nexus",
          "azure-openai-wrapper",
          "data-pipeline-orchestrator"
        ],
        "usage_count": 7,
        "reusability_score": 58,
        "benefits": [
          "Type safety at runtime",
          "Data quality enforcement",
          "Self-documenting schemas"
        ],
        "considerations": [
          "Performance impact of validation",
          "Schema evolution management"
        ]
      },
      {
        "name": "Jest Testing Framework",
        "type": "DESIGN",
        "description": "Automated testing using Jest for quality assurance",
        "repos_using": [
          "data-validation-service",
          "powerbi-embed-toolkit",
          "github-mcp-server",
          "api-gateway-service"
        ],
        "usage_count": 4,
        "reusability_score": 48,
        "benefits": [
          "Automated quality checks",
          "Regression prevention",
          "Confidence in deployments"
        ],
        "considerations": [
          "Test maintenance overhead",
          "Coverage goals and standards"
        ]
      },
      {
        "name": "Express.js Web Framework",
        "type": "DESIGN",
        "description": "RESTful API development using Express.js for scalable web services",
        "repos_using": [
          "data-validation-service",
          "api-gateway-service",
          "api-gateway-service"
        ],
        "usage_count": 3,
        "reusability_score": 44,
        "benefits": [
          "Proven framework with strong community",
          "Type safety and validation",
          "Fast development velocity"
        ],
        "considerations": [
          "Learning curve for new developers",
          "Framework-specific conventions"
        ]
      }
    ],
    "INTEGRATION": [
      {
        "name": "Azure Key Vault Integration Pattern",
        "type": "INTEGRATION",
        "description": "Integration with Azure Key Vault for enterprise capabilities",
        "repos_using": [
          "repo-analyzer",
          "cost-tracker-api",
          "innovation-nexus",
          "azure-openai-wrapper"
        ],
        "usage_count": 4,
        "reusability_score": 63,
        "microsoft_technology": "Azure Key Vault",
        "benefits": [
          "Proven integration pattern",
          "Enterprise-grade capabilities",
          "Centralized management"
        ],
        "considerations": [
          "Authentication management",
          "Rate limiting",
          "Cost optimization"
        ]
      },
      {
        "name": "Notion MCP Integration Pattern",
        "type": "INTEGRATION",
        "description": "Integration with Notion MCP for enterprise capabilities",
        "repos_using": [
          "repo-analyzer",
          "notion-sync-engine",
          "innovation-nexus"
        ],
        "usage_count": 3,
        "reusability_score": 49,
        "microsoft_technology": null,
        "benefits": [
          "Proven integration pattern",
          "Enterprise-grade capabilities",
          "Scalable service"
        ],
        "considerations": [
          "Authentication management",
          "Rate limiting",
          "Vendor dependency"
        ]
      }
    ]
  }
}