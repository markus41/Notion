# Pre-commit Configuration for Brookside BI Repository Analyzer
#
# Establishes automated code quality checks to ensure consistent standards
# across all commits. This solution is designed to prevent common issues
# before they reach CI/CD pipelines, streamlining development workflows.
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Usage:
#   pre-commit run --all-files  # Run on all files
#   pre-commit run <hook-id>    # Run specific hook
#   git commit                  # Hooks run automatically
#
# Best for: Teams requiring consistent code quality without manual review overhead

repos:
  # Python Code Formatting with Black
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3.11
        args: ["--line-length=100"]

  # Python Linting with Ruff (replaces flake8, isort, etc.)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        name: Lint Python code with Ruff
        args: ["--fix", "--exit-non-zero-on-fix"]

  # Python Type Checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Type check Python code with mypy
        additional_dependencies:
          - pydantic>=2.0
          - httpx>=0.25.0
          - azure-identity>=1.15.0
          - azure-keyvault-secrets>=4.7.0
        args:
          - --ignore-missing-imports
          - --strict
          - --no-warn-unused-ignores

  # General File Quality Checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Remove trailing whitespace
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]

      # Ensure files end with newline
      - id: end-of-file-fixer
        name: Ensure files end with newline

      # Check YAML syntax
      - id: check-yaml
        name: Validate YAML syntax
        args: [--safe]

      # Check TOML syntax (pyproject.toml)
      - id: check-toml
        name: Validate TOML syntax

      # Check JSON syntax
      - id: check-json
        name: Validate JSON syntax

      # Prevent large files from being committed
      - id: check-added-large-files
        name: Prevent large files (>500KB)
        args: [--maxkb=500]

      # Check for merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflict markers

      # Detect private keys
      - id: detect-private-key
        name: Detect private keys and credentials

      # Check for case conflicts in filenames
      - id: check-case-conflict
        name: Check for case conflicts

      # Check Python syntax
      - id: check-ast
        name: Validate Python AST

      # Check for debugger imports
      - id: debug-statements
        name: Check for debugger statements

  # Poetry Lock File Check
  - repo: https://github.com/python-poetry/poetry
    rev: 1.7.0
    hooks:
      - id: poetry-check
        name: Validate pyproject.toml and poetry.lock
        args: [--lock]

  # Security: Bandit (Python security linter)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Security check with Bandit
        args:
          - -c
          - pyproject.toml
        additional_dependencies: ["bandit[toml]"]

  # Security: detect-secrets (find hardcoded credentials)
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect hardcoded secrets
        args: ["--baseline", ".secrets.baseline"]
        exclude: |
          (?x)^(
            poetry\.lock|
            \.secrets\.baseline
          )$

  # Markdown Linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args: ["--fix"]

  # Fast Unit Tests (optional - can be slow)
  # Uncomment to run tests on every commit
  # - repo: local
  #   hooks:
  #     - id: pytest-fast
  #       name: Run fast unit tests
  #       entry: poetry run pytest tests/unit/ -v --tb=short
  #       language: system
  #       pass_filenames: false
  #       stages: [commit]

# CI Configuration
ci:
  autofix_commit_msg: |
    chore: Streamline code quality with automated pre-commit fixes

    ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)

    Co-Authored-By: Claude <noreply@anthropic.com>
  autofix_prs: true
  autoupdate_commit_msg: |
    chore: Update pre-commit hooks to latest versions

    ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)

    Co-Authored-By: Claude <noreply@anthropic.com>
  autoupdate_schedule: monthly
