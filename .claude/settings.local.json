{
  "cleanupPeriodDays": 90,
  "env": {
    "AZURE_TENANT_ID": "2930489e-9d8a-456b-9de9-e4787faeab9c",
    "AZURE_SUBSCRIPTION_ID": "cfacbbe8-a2a3-445f-a188-68b3b35f0c84"
  },
  "includeCoAuthoredBy": true,
  "permissions": {
    "allow": [
      "Bash(claude mcp:*)",
      "Read(//c/Users/MarkusAhling/.claude/**)",
      "Read(//c/Users/MarkusAhling/**)",
      "Bash(az:*)",
      "Bash(npx @modelcontextprotocol/server-azure:*)",
      "Bash(mkdir:*)",
      "WebSearch",
      "Bash(powershell -ExecutionPolicy Bypass -File \"C:\\Users\\MarkusAhling\\Notion\\scripts\\Get-KeyVaultSecret.ps1\" -SecretName \"github-personal-access-token\")",
      "Bash(powershell -ExecutionPolicy Bypass -File:*)",
      "WebFetch(domain:github.com)",
      "Bash(npx -y @azure/mcp@latest --version)",
      "Bash(npx:*)",
      "Bash(Select-Object -First 20)",
      "Bash(powershell -Command \"npx -y @azure/mcp@latest server start 2>&1 | Select-Object -First 10\")",
      "Bash(Select-Object -First 10)",
      "Bash(powershell:*)",
      "Bash(cat:*)",
      "Bash(dir:*)",
      "Bash(Select-String -Pattern \"\\.json$|\\.claude\")",
      "mcp__notion__notion-search",
      "Bash(where.exe npx)",
      "mcp__notion__notion-fetch",
      "mcp__notion__notion-create-pages",
      "mcp__notion__notion-get-users",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: Establish comprehensive repository analysis infrastructure for Innovation Nexus\n\nImplement Python-based CLI tool to streamline portfolio management through automated\nrepository scanning, pattern extraction, and cost tracking. This solution is designed\nto drive measurable outcomes by integrating GitHub MCP and Notion MCP for seamless\nknowledge base generation.\n\nCore Features:\n- Organization-wide repository scanning with GitHub MCP integration\n- Multi-dimensional viability scoring (tests, activity, docs, dependencies)\n- Claude Code configuration detection (.claude/ directory parsing)\n- Cross-repository pattern mining and reusability assessment\n- Automated cost calculation with Software Tracker integration\n- Notion sync for Example Builds and Knowledge Vault entries\n\nTechnical Stack:\n- Python 3.11 with async/await for concurrent analysis\n- Pydantic for type-safe data models and configuration\n- Azure Key Vault for secure credential management\n- Click + Rich for beautiful CLI experience\n- Poetry for dependency management\n\nArchitecture:\n- GitHub MCP Client: Organization scanning and metadata extraction\n- Repository Analyzer: Viability scoring and quality metrics\n- Claude Detector: Agent/command/MCP configuration parsing\n- Pattern Miner: Architectural pattern and shared component identification\n- Cost Calculator: Dependency cost mapping and optimization opportunities\n- Notion Client: Automated database synchronization\n\nDeployment Modes:\n- Local CLI for on-demand manual execution\n- Azure Functions for scheduled weekly scans (planned)\n- GitHub Actions for event-triggered analysis (planned)\n\nBest for: Organizations managing multiple repositories requiring automated analysis,\ncost visibility, and knowledge base generation to support sustainable growth.\n\nRelated:\n- Notion Idea: https://www.notion.so/29386779099a816f8653e30ecb72abdd\n- Notion Build: https://www.notion.so/29386779099a815f8b3bdc5c5cfb6f68\n- Lead: Alec Fielding (DevOps, Engineering, Infrastructure)\n- Support: Markus Ahling (Infrastructure, Operations)\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(poetry --version:*)",
      "Bash(git clone:*)",
      "Bash(where.exe:*)",
      "Bash('C:\\Users\\MarkusAhling\\AppData\\Roaming\\Python\\Scripts\\poetry.exe' install)",
      "Bash('C:\\Users\\MarkusAhling\\AppData\\Roaming\\Python\\Scripts\\poetry.exe' run brookside-analyze --help)",
      "Bash('C:\\Users\\MarkusAhling\\AppData\\Roaming\\Python\\Scripts\\poetry.exe' run brookside-analyze scan --full --sync)",
      "Bash(for dir in tests/unit tests/integration tests/e2e deployment/azure_function deployment/github_actions)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(ls:*)",
      "Bash(done)",
      "Bash(C:UsersMarkusAhlingAppDataRoamingPythonScriptspoetry.exe run brookside-analyze scan --full --sync)",
      "Bash(C:UsersMarkusAhlingAppDataRoamingPythonScriptspoetry.exe run brookside-analyze scan --org markus41 --full)",
      "Bash(Tee-Object -FilePath analysis-results.txt)"
    ],
    "deny": [],
    "ask": []
  },
  "model": "claude-sonnet-4-5-20250929",
  "hooks": {
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "powershell -c \"[System.Media.SoundPlayer]::new('C:\\Windows\\Media\\Windows Notify System Generic.wav').PlaySync()\""
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "powershell -c \"[System.Media.SoundPlayer]::new('C:\\Windows\\Media\\Windows Notify Messaging.wav').PlaySync()\""
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "powershell -c \"[System.Media.SoundPlayer]::new('C:\\Windows\\Media\\Windows Notify Calendar.wav').PlaySync()\""
          }
        ]
      }
    ]
  },
  "sandbox": {
    "enabled": false
  }
}
