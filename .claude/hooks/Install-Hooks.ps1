# Install-Hooks.ps1
# Purpose: Establish automated repository safety hooks for Brookside BI Innovation Nexus
# Usage: .\Install-Hooks.ps1 [-Scope User|Project] [-EnableGitHooks]

[CmdletBinding()]
param(
    [Parameter()]
    [ValidateSet('User', 'Project')]
    [string]$Scope = 'Project',

    [Parameter()]
    [switch]$EnableGitHooks,

    [Parameter()]
    [switch]$Force
)

$ErrorActionPreference = 'Stop'

# Colors for output
function Write-Success { Write-Host $args -ForegroundColor Green }
function Write-Warning { Write-Host $args -ForegroundColor Yellow }
function Write-Info { Write-Host $args -ForegroundColor Cyan }
function Write-Error { Write-Host $args -ForegroundColor Red }

Write-Info "🚀 Installing Claude Code Repository Safety Hooks..."
Write-Info "═══════════════════════════════════════════════════════"
Write-Info ""

# Check if we're in the Notion repository
$currentPath = Get-Location
if (-not (Test-Path ".git")) {
    Write-Error "❌ Not a git repository. Please run from repository root."
    exit 1
}

Write-Success "✅ Git repository detected"

# Check if .claude/hooks directory exists
if (-not (Test-Path ".claude/hooks")) {
    Write-Error "❌ .claude/hooks directory not found. Ensure hooks are in repository."
    exit 1
}

Write-Success "✅ Hooks directory found"

# Determine settings file path
$settingsPath = if ($Scope -eq 'User') {
    "$env:USERPROFILE\.claude\settings.json"
} else {
    ".claude\settings.local.json"
}

Write-Info "📋 Installing to: $settingsPath"

# Check if settings file exists
$settingsExist = Test-Path $settingsPath
if ($settingsExist) {
    Write-Warning "⚠️  Settings file already exists"

    if (-not $Force) {
        $response = Read-Host "Merge with existing settings? [Y/n]"
        if ($response -eq 'n' -or $response -eq 'N') {
            Write-Info "Installation cancelled"
            exit 0
        }
    }
}

# Load example configuration
$exampleConfig = Get-Content ".claude\hooks\claude-settings-example.json" -Raw | ConvertFrom-Json

# If settings exist, merge; otherwise create new
if ($settingsExist) {
    Write-Info "📝 Merging with existing settings..."
    $currentSettings = Get-Content $settingsPath -Raw | ConvertFrom-Json

    # Merge hooks
    if (-not $currentSettings.hooks) {
        $currentSettings | Add-Member -NotePropertyName "hooks" -NotePropertyValue $exampleConfig.hooks
    } else {
        if (-not $currentSettings.hooks.'tool-call-hook') {
            $currentSettings.hooks | Add-Member -NotePropertyName "tool-call-hook" -NotePropertyValue $exampleConfig.hooks.'tool-call-hook'
        } else {
            # Append new hooks to existing
            $currentSettings.hooks.'tool-call-hook' += $exampleConfig.hooks.'tool-call-hook'
        }
    }

    # Merge permissions
    if (-not $currentSettings.permissions) {
        $currentSettings | Add-Member -NotePropertyName "permissions" -NotePropertyValue $exampleConfig.permissions
    } else {
        if (-not $currentSettings.permissions.allow) {
            $currentSettings.permissions | Add-Member -NotePropertyName "allow" -NotePropertyValue $exampleConfig.permissions.allow
        } else {
            # Append new permissions
            $currentSettings.permissions.allow += $exampleConfig.permissions.allow
            $currentSettings.permissions.allow = $currentSettings.permissions.allow | Select-Object -Unique
        }
    }

    $settingsToSave = $currentSettings
} else {
    Write-Info "📝 Creating new settings file..."
    $settingsToSave = $exampleConfig
}

# Ensure directory exists
$settingsDir = Split-Path $settingsPath -Parent
if (-not (Test-Path $settingsDir)) {
    New-Item -ItemType Directory -Path $settingsDir -Force | Out-Null
    Write-Success "✅ Created settings directory: $settingsDir"
}

# Save settings
$settingsToSave | ConvertTo-Json -Depth 10 | Set-Content $settingsPath -Encoding UTF8
Write-Success "✅ Settings saved to $settingsPath"

# Install native git hooks if requested
if ($EnableGitHooks) {
    Write-Info ""
    Write-Info "🔗 Installing native git hooks..."

    $gitHooksDir = ".git\hooks"
    if (-not (Test-Path $gitHooksDir)) {
        New-Item -ItemType Directory -Path $gitHooksDir -Force | Out-Null
    }

    # Create pre-commit hook
    $preCommitContent = @"
#!/bin/bash
# Auto-generated by Install-Hooks.ps1
# Runs pre-commit validation checks

bash .claude/hooks/pre-commit-validation.sh
exit `$?
"@

    Set-Content "$gitHooksDir\pre-commit" -Value $preCommitContent -Encoding UTF8
    Write-Success "✅ Created .git/hooks/pre-commit"

    # Create commit-msg hook
    $commitMsgContent = @"
#!/bin/bash
# Auto-generated by Install-Hooks.ps1
# Validates commit message format

bash .claude/hooks/commit-message-validator.sh "`$1"
exit `$?
"@

    Set-Content "$gitHooksDir\commit-msg" -Value $commitMsgContent -Encoding UTF8
    Write-Success "✅ Created .git/hooks/commit-msg"

    # Create pre-push hook
    $prePushContent = @"
#!/bin/bash
# Auto-generated by Install-Hooks.ps1
# Checks push safety

bash .claude/hooks/branch-protection.sh check-push
exit `$?
"@

    Set-Content "$gitHooksDir\pre-push" -Value $prePushContent -Encoding UTF8
    Write-Success "✅ Created .git/hooks/pre-push"

    Write-Info ""
    Write-Info "📋 Git hooks installed in .git/hooks/"
    Write-Info "   These will run for all git commands (not just Claude Code)"
}

# Test hook execution
Write-Info ""
Write-Info "🧪 Testing hook execution..."

try {
    # Test pre-commit validation
    $testResult = bash .claude/hooks/pre-commit-validation.sh 2>&1
    Write-Success "✅ pre-commit-validation.sh is executable"

    # Test commit message validator
    $testResult = bash .claude/hooks/commit-message-validator.sh "test: Sample message" 2>&1
    Write-Success "✅ commit-message-validator.sh is executable"

    # Test branch protection
    $testResult = bash .claude/hooks/branch-protection.sh suggest-workflow 2>&1
    Write-Success "✅ branch-protection.sh is executable"
} catch {
    Write-Warning "⚠️  Hooks may not be executable. Ensure Git Bash is installed."
    Write-Info "   Download: https://git-scm.com/downloads"
}

# Display summary
Write-Info ""
Write-Info "═══════════════════════════════════════════════════════"
Write-Success "✅ Installation Complete!"
Write-Info "═══════════════════════════════════════════════════════"
Write-Info ""
Write-Info "📋 Installed Hooks:"
Write-Info "   • Pre-commit validation (secrets, large files, protected branches)"
Write-Info "   • Commit message validation (Conventional Commits + Brookside BI)"
Write-Info "   • Branch protection (force push, branch deletion)"
Write-Info ""
Write-Info "📋 Configuration:"
Write-Info "   Settings: $settingsPath"
if ($EnableGitHooks) {
    Write-Info "   Git Hooks: .git/hooks/ (pre-commit, commit-msg, pre-push)"
}
Write-Info ""
Write-Info "📋 Next Steps:"
Write-Info "   1. Restart Claude Code to apply settings"
Write-Info "   2. Test with: git add . && git commit -m 'test: Sample message'"
Write-Info "   3. Review README: .claude/hooks/README.md"
Write-Info ""
Write-Info "📋 Troubleshooting:"
Write-Info "   • Hooks not running? Check .claude/settings.local.json"
Write-Info "   • Permission denied? Ensure Git Bash is installed"
Write-Info "   • False positives? See README.md for customization"
Write-Info ""
Write-Success "🎉 Repository safety hooks are ready to streamline your git workflow!"
Write-Info ""
