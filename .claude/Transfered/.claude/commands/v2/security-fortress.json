{
  "version": "2.0",
  "name": "security-fortress",
  "description": "Multi-layer security hardening across 7 phases with comprehensive vulnerability scanning, infrastructure security, and runtime protection",
  "pattern": "hierarchical-decomposition",
  "metadata": {
    "author": "Security Team",
    "created": "2025-10-08",
    "migrationFrom": "v1.0",
    "estimatedDuration": "70 minutes",
    "performanceImprovement": "60% faster (105 minutes saved)",
    "previousDuration": "175 minutes",
    "phases": 7,
    "totalAgents": 21,
    "parallelismLevels": {
      "phase1": 1,
      "phase2": 4,
      "phase3": 3,
      "phase4": 3,
      "phase5": 4,
      "phase6": 3,
      "phase7": 3
    },
    "criticalFeatures": [
      "Saga compensation for runtime changes",
      "Resource locking for concurrent operations",
      "Conditional execution based on project structure",
      "Context sharing across all phases",
      "Priority-based execution"
    ]
  },
  "saga": {
    "enabled": true,
    "compensationOrder": "reverse",
    "transactionTimeout": 7200,
    "isolationLevel": "read-committed"
  },
  "resourceManagement": {
    "globalLocks": [
      {
        "resourceId": "waf-config",
        "description": "Web Application Firewall configuration",
        "maxConcurrent": 1
      },
      {
        "resourceId": "secrets-vault",
        "description": "Secrets and credentials vault",
        "maxConcurrent": 1
      },
      {
        "resourceId": "runtime-monitoring",
        "description": "Runtime security monitoring configuration",
        "maxConcurrent": 1
      },
      {
        "resourceId": "network-policies",
        "description": "Network security policies",
        "maxConcurrent": 1
      }
    ]
  },
  "context": {
    "shared": [
      {
        "key": "threat_model",
        "description": "Identified threat vectors and attack surfaces",
        "ttl": 3600,
        "scope": "global"
      },
      {
        "key": "attack_vectors",
        "description": "Potential attack vectors prioritized by risk",
        "ttl": 3600,
        "scope": "global"
      },
      {
        "key": "security_priorities",
        "description": "Security priorities based on threat model",
        "ttl": 3600,
        "scope": "global"
      },
      {
        "key": "project_structure",
        "description": "Project technologies and deployment architecture",
        "ttl": 3600,
        "scope": "global"
      },
      {
        "key": "sast_findings",
        "description": "Static analysis security findings",
        "ttl": 3600,
        "scope": "phase2-output"
      },
      {
        "key": "dependency_vulnerabilities",
        "description": "Dependency and supply chain vulnerabilities",
        "ttl": 3600,
        "scope": "phase3-output"
      },
      {
        "key": "container_vulnerabilities",
        "description": "Container and image vulnerabilities",
        "ttl": 3600,
        "scope": "phase4-output"
      },
      {
        "key": "infrastructure_findings",
        "description": "Infrastructure security findings",
        "ttl": 3600,
        "scope": "phase5-output"
      },
      {
        "key": "runtime_config",
        "description": "Runtime security configuration state",
        "ttl": 3600,
        "scope": "phase6-output"
      }
    ]
  },
  "phases": [
    {
      "id": "phase-1-threat-modeling",
      "name": "Threat Modeling & Attack Surface Analysis",
      "description": "Analyze application architecture, identify threat vectors, and establish security priorities",
      "sequential": true,
      "estimatedDuration": 10,
      "agents": [
        {
          "id": "threat-analyzer",
          "type": "security-specialist",
          "priority": 1,
          "task": "Analyze application architecture and identify potential threat vectors, attack surfaces, and security risks. Create comprehensive threat model using STRIDE methodology.",
          "estimatedDuration": 10,
          "dependencies": [],
          "context": {
            "inputs": [],
            "outputs": [
              "threat_model",
              "attack_vectors",
              "security_priorities",
              "project_structure"
            ]
          },
          "deliverables": [
            "threat-model.md",
            "attack-surface-analysis.md",
            "security-priorities.json"
          ]
        }
      ]
    },
    {
      "id": "phase-2-static-analysis",
      "name": "Static Application Security Testing (SAST)",
      "description": "Parallel execution of multiple SAST tools to identify code-level vulnerabilities",
      "sequential": false,
      "parallelism": {
        "enabled": true,
        "maxConcurrent": 4,
        "strategy": "all-parallel"
      },
      "estimatedDuration": 10,
      "agents": [
        {
          "id": "codeql-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run CodeQL static analysis to identify security vulnerabilities in code. Focus on SQL injection, XSS, path traversal, and other OWASP Top 10 issues based on threat model.",
          "estimatedDuration": 10,
          "dependencies": ["threat-analyzer"],
          "context": {
            "inputs": ["threat_model", "attack_vectors", "security_priorities"],
            "outputs": ["codeql_findings"]
          },
          "tools": ["codeql", "github-code-scanning"],
          "configuration": {
            "suites": ["security-extended", "security-and-quality"],
            "languages": ["javascript", "typescript", "python", "csharp"]
          },
          "deliverables": [
            "codeql-results.sarif",
            "codeql-summary.md"
          ]
        },
        {
          "id": "semgrep-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run Semgrep static analysis with security rulesets. Detect common vulnerability patterns, insecure configurations, and security anti-patterns.",
          "estimatedDuration": 10,
          "dependencies": ["threat-analyzer"],
          "context": {
            "inputs": ["threat_model", "security_priorities"],
            "outputs": ["semgrep_findings"]
          },
          "tools": ["semgrep"],
          "configuration": {
            "rulesets": [
              "p/security-audit",
              "p/owasp-top-ten",
              "p/react",
              "p/typescript",
              "p/python"
            ]
          },
          "deliverables": [
            "semgrep-results.json",
            "semgrep-summary.md"
          ]
        },
        {
          "id": "bandit-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run Bandit security scanner on Python code. Identify common security issues like hardcoded secrets, weak cryptography, SQL injection, and insecure deserialization.",
          "estimatedDuration": 10,
          "dependencies": ["threat-analyzer"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["bandit_findings"]
          },
          "tools": ["bandit"],
          "configuration": {
            "severity": ["high", "medium"],
            "confidence": ["high", "medium"],
            "excludePaths": ["tests/", "venv/"]
          },
          "conditional": {
            "condition": "project_structure.hasPython === true",
            "skipMessage": "No Python code detected, skipping Bandit scan"
          },
          "deliverables": [
            "bandit-results.json",
            "bandit-summary.md"
          ]
        },
        {
          "id": "eslint-security-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run ESLint with security plugins (eslint-plugin-security, eslint-plugin-no-secrets) to detect JavaScript/TypeScript security issues. Focus on XSS, prototype pollution, regex DoS, and exposed secrets.",
          "estimatedDuration": 10,
          "dependencies": ["threat-analyzer"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["eslint_security_findings"]
          },
          "tools": ["eslint"],
          "configuration": {
            "plugins": [
              "eslint-plugin-security",
              "eslint-plugin-no-secrets",
              "eslint-plugin-react-security"
            ],
            "extends": ["plugin:security/recommended"]
          },
          "conditional": {
            "condition": "project_structure.hasJavaScript === true || project_structure.hasTypeScript === true",
            "skipMessage": "No JavaScript/TypeScript code detected, skipping ESLint security scan"
          },
          "deliverables": [
            "eslint-security-results.json",
            "eslint-security-summary.md"
          ]
        }
      ]
    },
    {
      "id": "phase-3-dependency-scanning",
      "name": "Dependency & Supply Chain Security",
      "description": "Parallel scanning of dependencies for known vulnerabilities and license compliance",
      "sequential": false,
      "parallelism": {
        "enabled": true,
        "maxConcurrent": 3,
        "strategy": "all-parallel"
      },
      "estimatedDuration": 10,
      "agents": [
        {
          "id": "npm-audit-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run npm audit to identify vulnerabilities in Node.js dependencies. Generate detailed report with severity levels, affected packages, and remediation guidance.",
          "estimatedDuration": 10,
          "dependencies": ["codeql-scanner", "semgrep-scanner", "bandit-scanner", "eslint-security-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["npm_vulnerabilities"]
          },
          "tools": ["npm"],
          "configuration": {
            "auditLevel": "moderate",
            "production": true,
            "json": true
          },
          "conditional": {
            "condition": "project_structure.hasNodeModules === true",
            "skipMessage": "No package.json detected, skipping npm audit"
          },
          "deliverables": [
            "npm-audit-results.json",
            "npm-audit-summary.md",
            "npm-audit-fix-recommendations.md"
          ]
        },
        {
          "id": "snyk-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run Snyk vulnerability scanner across all dependency ecosystems (npm, pip, NuGet). Identify vulnerabilities, license issues, and provide fix recommendations with priority scoring.",
          "estimatedDuration": 10,
          "dependencies": ["codeql-scanner", "semgrep-scanner", "bandit-scanner", "eslint-security-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure", "security_priorities"],
            "outputs": ["snyk_vulnerabilities"]
          },
          "tools": ["snyk"],
          "configuration": {
            "severity": ["critical", "high", "medium"],
            "scanTypes": ["dependencies", "code", "container", "iac"],
            "failOn": "upgradable"
          },
          "deliverables": [
            "snyk-results.json",
            "snyk-summary.md",
            "snyk-fix-pr-candidates.md"
          ]
        },
        {
          "id": "owasp-dependency-check",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run OWASP Dependency-Check to identify known CVEs in project dependencies using National Vulnerability Database. Generate comprehensive vulnerability report with CVSS scores.",
          "estimatedDuration": 10,
          "dependencies": ["codeql-scanner", "semgrep-scanner", "bandit-scanner", "eslint-security-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["owasp_cve_findings"]
          },
          "tools": ["dependency-check"],
          "configuration": {
            "scanners": ["npm", "nuget", "python"],
            "format": ["HTML", "JSON", "SARIF"],
            "failOnCVSS": 7.0
          },
          "deliverables": [
            "dependency-check-report.html",
            "dependency-check-results.json",
            "cve-summary.md"
          ]
        }
      ]
    },
    {
      "id": "phase-4-container-security",
      "name": "Container & Image Security Scanning",
      "description": "Parallel scanning of Docker images, Dockerfiles, and container configurations",
      "sequential": false,
      "parallelism": {
        "enabled": true,
        "maxConcurrent": 3,
        "strategy": "all-parallel"
      },
      "estimatedDuration": 9,
      "agents": [
        {
          "id": "dockerfile-linter",
          "type": "security-specialist",
          "priority": 2,
          "task": "Lint Dockerfiles for security best practices using Hadolint. Check for insecure base images, exposed secrets, privilege escalation, and container hardening issues.",
          "estimatedDuration": 8,
          "dependencies": ["npm-audit-scanner", "snyk-scanner", "owasp-dependency-check"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["dockerfile_issues"]
          },
          "tools": ["hadolint"],
          "configuration": {
            "severity": ["error", "warning", "info"],
            "rules": {
              "DL3006": "error",
              "DL3008": "error",
              "DL3009": "error",
              "DL4006": "error"
            }
          },
          "conditional": {
            "condition": "project_structure.hasDockerfile === true",
            "skipMessage": "No Dockerfiles detected, skipping Dockerfile linting"
          },
          "deliverables": [
            "hadolint-results.json",
            "dockerfile-security-issues.md"
          ]
        },
        {
          "id": "trivy-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run Trivy container vulnerability scanner on Docker images. Scan for OS vulnerabilities, application dependencies, misconfigurations, and secrets in images.",
          "estimatedDuration": 9,
          "dependencies": ["npm-audit-scanner", "snyk-scanner", "owasp-dependency-check"],
          "context": {
            "inputs": ["threat_model", "project_structure", "security_priorities"],
            "outputs": ["trivy_vulnerabilities"]
          },
          "tools": ["trivy"],
          "configuration": {
            "scanners": ["vuln", "config", "secret"],
            "severity": ["CRITICAL", "HIGH", "MEDIUM"],
            "format": ["json", "sarif", "table"]
          },
          "conditional": {
            "condition": "project_structure.hasDockerImages === true",
            "skipMessage": "No Docker images detected, skipping Trivy scan"
          },
          "deliverables": [
            "trivy-results.json",
            "trivy-summary.md",
            "image-vulnerabilities.md"
          ]
        },
        {
          "id": "container-bench-scanner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Run Docker Bench Security to check Docker daemon configuration and container runtime security against CIS Docker Benchmark. Verify security best practices for container orchestration.",
          "estimatedDuration": 8,
          "dependencies": ["npm-audit-scanner", "snyk-scanner", "owasp-dependency-check"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["docker_bench_findings"]
          },
          "tools": ["docker-bench-security"],
          "configuration": {
            "checks": [
              "host_configuration",
              "docker_daemon_configuration",
              "docker_daemon_configuration_files",
              "container_images_and_build_file",
              "container_runtime",
              "docker_security_operations"
            ]
          },
          "conditional": {
            "condition": "project_structure.hasDocker === true",
            "skipMessage": "Docker not in use, skipping Docker Bench Security"
          },
          "deliverables": [
            "docker-bench-results.log",
            "docker-cis-benchmark-summary.md"
          ]
        }
      ]
    },
    {
      "id": "phase-5-infrastructure-security",
      "name": "Infrastructure as Code Security",
      "description": "Parallel scanning of IaC templates, cloud configurations, and Kubernetes policies",
      "sequential": false,
      "parallelism": {
        "enabled": true,
        "maxConcurrent": 4,
        "strategy": "all-parallel"
      },
      "estimatedDuration": 9,
      "agents": [
        {
          "id": "bicep-terraform-scanner",
          "type": "security-specialist",
          "priority": 3,
          "task": "Scan Bicep/Terraform templates for security misconfigurations using Checkov and tfsec. Identify insecure cloud resources, overly permissive IAM policies, unencrypted storage, and compliance violations.",
          "estimatedDuration": 9,
          "dependencies": ["dockerfile-linter", "trivy-scanner", "container-bench-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure", "security_priorities"],
            "outputs": ["iac_security_findings"]
          },
          "tools": ["checkov", "tfsec", "terrascan"],
          "configuration": {
            "frameworks": ["bicep", "terraform", "arm"],
            "checks": [
              "CKV_AZURE_*",
              "azure-security-center-*",
              "azure-storage-*",
              "azure-network-*"
            ],
            "severity": ["CRITICAL", "HIGH"]
          },
          "conditional": {
            "condition": "project_structure.hasIaC === true",
            "skipMessage": "No IaC templates detected, skipping IaC security scan"
          },
          "deliverables": [
            "iac-security-results.json",
            "bicep-terraform-misconfigurations.md",
            "cloud-security-posture.md"
          ]
        },
        {
          "id": "cloudformation-scanner",
          "type": "security-specialist",
          "priority": 3,
          "task": "Scan AWS CloudFormation templates for security issues using cfn-nag. Check for insecure resource configurations, missing encryption, overly permissive security groups, and IAM policy violations.",
          "estimatedDuration": 8,
          "dependencies": ["dockerfile-linter", "trivy-scanner", "container-bench-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure"],
            "outputs": ["cfn_security_findings"]
          },
          "tools": ["cfn-nag", "cfn-guard"],
          "configuration": {
            "ruleDirectory": "custom-rules/",
            "failOnWarnings": true,
            "blacklistPath": ".cfn-nag-blacklist.yml"
          },
          "conditional": {
            "condition": "project_structure.hasCloudFormation === true",
            "skipMessage": "No CloudFormation templates detected, skipping CFN scan"
          },
          "deliverables": [
            "cfn-nag-results.json",
            "cloudformation-security-issues.md"
          ]
        },
        {
          "id": "kubernetes-hardening-scanner",
          "type": "security-specialist",
          "priority": 3,
          "task": "Audit Kubernetes manifests and Helm charts for security best practices using Kubesec, Polaris, and KubeLinter. Check for privilege escalation, insecure pod security policies, resource limits, and network policies.",
          "estimatedDuration": 9,
          "dependencies": ["dockerfile-linter", "trivy-scanner", "container-bench-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure", "security_priorities"],
            "outputs": ["k8s_security_findings"]
          },
          "tools": ["kubesec", "polaris", "kube-linter"],
          "configuration": {
            "checks": [
              "pod-security-standards",
              "network-policies",
              "rbac-policies",
              "secrets-management",
              "resource-limits"
            ],
            "severity": ["danger", "warning"]
          },
          "conditional": {
            "condition": "project_structure.hasKubernetes === true",
            "skipMessage": "No Kubernetes manifests detected, skipping K8s hardening scan"
          },
          "deliverables": [
            "k8s-security-results.json",
            "kubernetes-hardening-report.md",
            "pod-security-recommendations.md"
          ]
        },
        {
          "id": "network-policy-auditor",
          "type": "security-specialist",
          "priority": 3,
          "task": "Audit network security policies, firewall rules, and service mesh configurations. Verify principle of least privilege, check for overly permissive ingress/egress rules, and validate network segmentation.",
          "estimatedDuration": 8,
          "dependencies": ["dockerfile-linter", "trivy-scanner", "container-bench-scanner"],
          "context": {
            "inputs": ["threat_model", "project_structure", "attack_vectors"],
            "outputs": ["network_policy_findings"]
          },
          "resources": {
            "locks": [
              {
                "resourceId": "network-policies",
                "priority": 3,
                "timeout": 300
              }
            ]
          },
          "tools": ["cilium", "calico", "istio-analyzer"],
          "configuration": {
            "checkDefaultDeny": true,
            "validateEgressRules": true,
            "checkServiceMesh": true
          },
          "deliverables": [
            "network-policy-audit.md",
            "network-segmentation-report.md",
            "firewall-rules-analysis.md"
          ]
        }
      ]
    },
    {
      "id": "phase-6-runtime-security",
      "name": "Runtime Security Configuration",
      "description": "Configure runtime security monitoring, WAF rules, and rotate secrets (with compensation)",
      "sequential": false,
      "parallelism": {
        "enabled": true,
        "maxConcurrent": 3,
        "strategy": "all-parallel"
      },
      "estimatedDuration": 7,
      "agents": [
        {
          "id": "runtime-monitoring-setup",
          "type": "devops-automator",
          "priority": 4,
          "task": "Configure runtime application security monitoring (RASP) and intrusion detection. Set up Falco, Sysdig, or similar tools for runtime threat detection, anomaly detection, and behavioral monitoring.",
          "estimatedDuration": 7,
          "dependencies": ["bicep-terraform-scanner", "cloudformation-scanner", "kubernetes-hardening-scanner", "network-policy-auditor"],
          "context": {
            "inputs": ["threat_model", "attack_vectors", "project_structure"],
            "outputs": ["runtime_monitoring_config"]
          },
          "resources": {
            "locks": [
              {
                "resourceId": "runtime-monitoring",
                "priority": 4,
                "timeout": 300
              }
            ]
          },
          "tools": ["falco", "sysdig", "azure-defender"],
          "configuration": {
            "rules": [
              "detect-reverse-shell",
              "detect-crypto-mining",
              "detect-privilege-escalation",
              "detect-suspicious-network-activity"
            ],
            "alerting": true,
            "logging": true
          },
          "compensation": {
            "agentId": "devops-automator",
            "description": "Restore previous runtime monitoring configuration",
            "task": "Rollback runtime monitoring configuration to previous state from backup",
            "priority": 1,
            "deliverables": [
              "runtime-monitoring-rollback-log.md"
            ]
          },
          "deliverables": [
            "runtime-monitoring-config.yml",
            "falco-rules.yml",
            "runtime-security-setup.md"
          ]
        },
        {
          "id": "waf-configuration",
          "type": "devops-automator",
          "priority": 4,
          "task": "Configure Web Application Firewall (WAF) rules based on threat model and OWASP ModSecurity Core Rule Set. Set up rate limiting, IP filtering, SQL injection prevention, XSS protection, and custom rules for identified attack vectors.",
          "estimatedDuration": 7,
          "dependencies": ["bicep-terraform-scanner", "cloudformation-scanner", "kubernetes-hardening-scanner", "network-policy-auditor"],
          "context": {
            "inputs": ["threat_model", "attack_vectors", "sast_findings"],
            "outputs": ["waf_config"]
          },
          "resources": {
            "locks": [
              {
                "resourceId": "waf-config",
                "priority": 4,
                "timeout": 300
              }
            ]
          },
          "tools": ["azure-waf", "cloudflare-waf", "modsecurity"],
          "configuration": {
            "rulesets": [
              "OWASP-CRS-3.3",
              "custom-application-rules"
            ],
            "mode": "detection",
            "exclusions": []
          },
          "compensation": {
            "agentId": "devops-automator",
            "description": "Restore previous WAF configuration",
            "task": "Rollback WAF rules to previous configuration snapshot. Restore rate limits, IP allowlists, and custom rules to last known good state.",
            "priority": 1,
            "deliverables": [
              "waf-rollback-log.md",
              "waf-config-restore-verification.md"
            ]
          },
          "deliverables": [
            "waf-rules.json",
            "waf-configuration.md",
            "waf-testing-plan.md"
          ]
        },
        {
          "id": "secrets-rotation",
          "type": "security-specialist",
          "priority": 4,
          "task": "Rotate all application secrets, API keys, certificates, and credentials. Update Azure Key Vault, AWS Secrets Manager, or equivalent. Verify secret rotation policies and access controls.",
          "estimatedDuration": 7,
          "dependencies": ["bicep-terraform-scanner", "cloudformation-scanner", "kubernetes-hardening-scanner", "network-policy-auditor"],
          "context": {
            "inputs": ["threat_model", "sast_findings", "project_structure"],
            "outputs": ["secrets_rotation_status"]
          },
          "resources": {
            "locks": [
              {
                "resourceId": "secrets-vault",
                "priority": 4,
                "timeout": 300
              }
            ]
          },
          "tools": ["azure-keyvault", "aws-secrets-manager", "hashicorp-vault"],
          "configuration": {
            "rotationPolicies": {
              "apiKeys": "90d",
              "certificates": "365d",
              "dbCredentials": "30d"
            },
            "verifyAccess": true,
            "updateReferences": true
          },
          "compensation": {
            "agentId": "cryptography-expert",
            "description": "Restore previous secrets from backup",
            "task": "Rotate back to previous secret versions from Key Vault version history. Verify all services can authenticate with restored credentials.",
            "priority": 1,
            "deliverables": [
              "secrets-restore-log.md",
              "credential-verification-report.md"
            ]
          },
          "deliverables": [
            "secrets-rotation-log.md",
            "key-vault-audit.md",
            "secrets-access-review.md"
          ]
        }
      ]
    },
    {
      "id": "phase-7-reporting-remediation",
      "name": "Vulnerability Aggregation & Remediation Planning",
      "description": "Aggregate all findings, prioritize risks, and create actionable remediation plan",
      "sequential": true,
      "estimatedDuration": 15,
      "agents": [
        {
          "id": "vulnerability-aggregator",
          "type": "security-specialist",
          "priority": 2,
          "task": "Aggregate all security findings from SAST, dependency scanning, container security, IaC scanning, and runtime configuration. Deduplicate issues, normalize severity ratings, and create unified vulnerability database.",
          "estimatedDuration": 5,
          "dependencies": [
            "runtime-monitoring-setup",
            "waf-configuration",
            "secrets-rotation"
          ],
          "context": {
            "inputs": [
              "sast_findings",
              "dependency_vulnerabilities",
              "container_vulnerabilities",
              "infrastructure_findings",
              "runtime_config",
              "codeql_findings",
              "semgrep_findings",
              "bandit_findings",
              "eslint_security_findings",
              "npm_vulnerabilities",
              "snyk_vulnerabilities",
              "owasp_cve_findings",
              "dockerfile_issues",
              "trivy_vulnerabilities",
              "docker_bench_findings",
              "iac_security_findings",
              "cfn_security_findings",
              "k8s_security_findings",
              "network_policy_findings"
            ],
            "outputs": ["aggregated_vulnerabilities"]
          },
          "deliverables": [
            "vulnerability-database.json",
            "aggregated-findings.md",
            "deduplication-report.md"
          ]
        },
        {
          "id": "risk-prioritizer",
          "type": "security-specialist",
          "priority": 2,
          "task": "Prioritize aggregated vulnerabilities using CVSS scores, exploitability, business impact, and threat model context. Apply risk scoring framework (DREAD or similar) and categorize findings by severity and remediation urgency.",
          "estimatedDuration": 5,
          "dependencies": ["vulnerability-aggregator"],
          "context": {
            "inputs": [
              "aggregated_vulnerabilities",
              "threat_model",
              "attack_vectors",
              "security_priorities"
            ],
            "outputs": ["prioritized_risks"]
          },
          "deliverables": [
            "risk-matrix.md",
            "prioritized-vulnerabilities.json",
            "cvss-analysis.md"
          ]
        },
        {
          "id": "remediation-planner",
          "type": "security-specialist",
          "priority": 2,
          "task": "Create comprehensive remediation plan with specific actions, timelines, and owners for each prioritized vulnerability. Include quick wins, long-term fixes, compensating controls, and acceptance criteria. Generate executive summary and technical remediation guides.",
          "estimatedDuration": 5,
          "dependencies": ["risk-prioritizer"],
          "context": {
            "inputs": [
              "prioritized_risks",
              "threat_model",
              "project_structure"
            ],
            "outputs": ["remediation_plan"]
          },
          "deliverables": [
            "remediation-plan.md",
            "executive-summary.md",
            "technical-remediation-guides/",
            "security-metrics-dashboard.md",
            "compliance-checklist.md"
          ]
        }
      ]
    }
  ],
  "errorHandling": {
    "retryPolicy": {
      "maxAttempts": 3,
      "backoffMultiplier": 2,
      "initialDelay": 5000
    },
    "fallbackStrategy": "continue-with-warnings",
    "criticalPhases": ["phase-6-runtime-security"]
  },
  "monitoring": {
    "progressReporting": true,
    "estimatedTotalDuration": 70,
    "checkpoints": [
      {
        "phase": "phase-2-static-analysis",
        "description": "SAST scans completed"
      },
      {
        "phase": "phase-3-dependency-scanning",
        "description": "Dependency vulnerabilities identified"
      },
      {
        "phase": "phase-5-infrastructure-security",
        "description": "IaC security validated"
      },
      {
        "phase": "phase-6-runtime-security",
        "description": "Runtime security configured (with rollback capability)"
      },
      {
        "phase": "phase-7-reporting-remediation",
        "description": "Remediation plan ready"
      }
    ]
  },
  "successCriteria": {
    "allPhasesCompleted": true,
    "minimumFindings": 0,
    "criticalVulnerabilitiesAddressed": true,
    "remediationPlanGenerated": true,
    "compensationTestsPass": true
  }
}
