# C4 System Context Diagram - Agent Studio

## Overview
This diagram establishes the high-level context for Agent Studio within the broader enterprise ecosystem, showing external actors, integrated systems, and primary communication patterns designed to streamline AI agent orchestration across organizational boundaries.

**Best for:** Stakeholders seeking to understand how Agent Studio fits within existing technology infrastructure and business workflows.

## System Context (C4 Level 1)

```mermaid
C4Context
    title System Context - Agent Studio Platform (C4 Level 1)

    Person(developer, "Application Developer", "Creates and tests AI agent workflows to automate complex business processes")
    Person(operator, "Platform Operator", "Deploys, monitors, and maintains Agent Studio infrastructure across environments")
    Person(businessUser, "Business Analyst", "Configures agents, reviews execution results, and validates business outcomes")

    System_Boundary(agentStudio, "Agent Studio Platform") {
        System(platform, "Agent Studio", "Cloud-native SaaS platform for building, deploying, and managing AI agents using Microsoft Agentic Framework. Supports sequential, parallel, iterative, and dynamic workflow patterns with enterprise-grade reliability.")
    }

    System_Ext(azureOpenAI, "Azure OpenAI", "LLM inference service providing GPT-4, GPT-3.5-Turbo, and text-embedding-ada-002 models for agent intelligence")
    System_Ext(azureAD, "Azure Active Directory", "Identity provider for OAuth 2.0/OIDC authentication and role-based authorization")
    System_Ext(cosmosDB, "Azure Cosmos DB", "Globally distributed NoSQL database storing workflow state, checkpoints, and agent conversations")
    System_Ext(signalRService, "Azure SignalR Service", "Managed real-time communication service enabling WebSocket connections for live workflow updates")
    System_Ext(appInsights, "Application Insights", "Azure monitoring service collecting distributed traces, metrics, and logs across all platform components")
    System_Ext(keyVault, "Azure Key Vault", "Secrets management service storing API keys, connection strings, and certificates")
    System_Ext(github, "GitHub", "Source control platform triggering CI/CD workflows and storing agent definitions")
    System_Ext(slack, "Slack", "Team collaboration platform receiving workflow notifications and alerts")

    Rel(developer, platform, "Creates workflows, designs agents, tests executions", "HTTPS/REST API")
    Rel(operator, platform, "Deploys updates, monitors health, configures scaling", "HTTPS/Azure Portal")
    Rel(businessUser, platform, "Reviews results, validates outputs, configures rules", "HTTPS/Web UI")

    Rel(platform, azureOpenAI, "Generates AI responses, creates embeddings", "HTTPS/Azure SDK")
    Rel(platform, azureAD, "Authenticates users, validates tokens", "OAuth 2.0/OIDC")
    Rel(platform, cosmosDB, "Persists state, stores checkpoints, manages recovery", "Cosmos DB SDK")
    Rel(platform, signalRService, "Publishes real-time events, broadcasts updates", "SignalR SDK")
    Rel(platform, appInsights, "Sends telemetry, logs traces, reports metrics", "OpenTelemetry")
    Rel(platform, keyVault, "Retrieves secrets, accesses certificates", "Managed Identity")
    Rel(platform, github, "Triggers deployments, retrieves workflows", "GitHub API")
    Rel(platform, slack, "Sends notifications, posts alerts", "Webhook API")

    UpdateRelStyle(developer, platform, $textColor="blue", $lineColor="blue")
    UpdateRelStyle(operator, platform, $textColor="green", $lineColor="green")
    UpdateRelStyle(businessUser, platform, $textColor="purple", $lineColor="purple")

    UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
```

## Key Actors

### Application Developer
**Primary Goal:** Build sustainable AI agent workflows that automate complex, multi-step business processes

**Key Activities:**
- Design workflow patterns (Sequential, Parallel, Iterative, Dynamic)
- Configure agent handoffs and context passing
- Test workflow executions in development environment
- Monitor workflow performance and optimize execution paths
- Debug failures using distributed traces and checkpoint recovery

**Access Level:** Full CRUD access to workflows, agents, and configurations via API and Web UI

---

### Platform Operator
**Primary Goal:** Establish reliable infrastructure that supports continuous operation with measurable uptime and performance

**Key Activities:**
- Deploy infrastructure updates via Bicep templates
- Monitor platform health using Application Insights dashboards
- Configure auto-scaling rules based on workload metrics
- Manage secrets rotation in Azure Key Vault
- Respond to alerts and incidents with runbooks
- Optimize costs through resource right-sizing

**Access Level:** Azure subscription Owner/Contributor with Azure RBAC permissions

---

### Business Analyst
**Primary Goal:** Drive measurable business outcomes through validated agent configurations and execution results

**Key Activities:**
- Configure agent behavior and quality gates
- Review workflow execution results and validation reports
- Validate business logic compliance in agent outputs
- Export analytics for stakeholder reporting
- Adjust workflow parameters based on business rules

**Access Level:** Read access to workflows and results, write access to configurations

## External System Integration

### Azure OpenAI
**Purpose:** Provide LLM intelligence for agent decision-making and content generation

**Integration Pattern:** HTTP REST API with retry and circuit breaker patterns

**Key Features:**
- GPT-4 deployment (10K TPM) for complex reasoning tasks
- GPT-3.5-Turbo deployment (30K TPM) for high-throughput operations
- text-embedding-ada-002 for semantic search and memory retrieval
- Managed identity authentication eliminates API key management

**Cost Impact:** Primary cost driver; optimized through prompt caching and model selection strategies

---

### Azure Active Directory
**Purpose:** Establish secure authentication and role-based authorization across all platform components

**Integration Pattern:** OAuth 2.0/OIDC with JWT token validation

**Security Features:**
- Multi-factor authentication (MFA) enforcement
- Conditional access policies for device compliance
- Privileged Identity Management (PIM) for just-in-time admin access
- Managed identities for service-to-service authentication

**Compliance:** SOC 2, ISO 27001, HIPAA compliant identity management

---

### Azure Cosmos DB
**Purpose:** Persist workflow state, checkpoints, and agent conversations with global distribution

**Integration Pattern:** Cosmos DB SQL API with optimistic concurrency control

**Data Containers:**
- `workflows`: Workflow execution state and metadata
- `checkpoints`: Recovery checkpoints with automatic expiration (30 days)
- `thread-message-store`: Agent conversation history
- `agent-entity-store`: Agent configurations and capabilities

**Performance:** Serverless mode for dev/test; provisioned throughput (400-10K RU/s) for production

---

### Azure SignalR Service
**Purpose:** Enable real-time bidirectional communication for live workflow monitoring

**Integration Pattern:** SignalR Hub with WebSocket transport

**Event Types:**
- `WorkflowStarted`, `WorkflowCompleted`, `WorkflowFailed`
- `TaskStarted`, `TaskCompleted`, `TaskFailed`
- `AgentThought`, `AgentProgress`, `AgentTool`
- `CheckpointCreated`, `RecoveryInitiated`

**Scaling:** Free tier for dev; Standard S1 (1K concurrent connections) for production

---

### Application Insights
**Purpose:** Streamline observability across distributed components with unified telemetry collection

**Integration Pattern:** OpenTelemetry with auto-instrumentation

**Telemetry Types:**
- **Distributed Traces:** End-to-end workflow execution paths with correlation IDs
- **Metrics:** Workflow duration, agent latency, checkpoint frequency, error rates
- **Logs:** Structured logs with severity levels (Info, Warning, Error, Critical)
- **Exceptions:** Automatic exception capture with stack traces

**Retention:** 90 days default; 730 days for compliance workloads

---

### Azure Key Vault
**Purpose:** Centralize secrets management to eliminate hardcoded credentials

**Integration Pattern:** Managed Identity with Azure RBAC (Key Vault Secrets User role)

**Stored Secrets:**
- Azure OpenAI API keys and endpoints
- Cosmos DB connection strings
- SignalR Service connection strings
- Third-party API keys (Slack, GitHub)
- Certificate private keys for TLS

**Access Patterns:** On-demand retrieval with in-memory caching (5 min TTL)

---

### GitHub
**Purpose:** Trigger automated deployments and retrieve workflow definitions from source control

**Integration Pattern:** GitHub Actions webhook triggers and GitHub API (REST/GraphQL)

**Workflows:**
- **CI Pipeline:** Build validation on pull requests
- **Deploy Pipeline:** Environment-specific deployments (dev/staging/prod)
- **Release Pipeline:** Version tagging and release notes generation

**Authentication:** GitHub App installation with scoped permissions (read repo, write deployments)

---

### Slack
**Purpose:** Deliver timely notifications to teams for workflow completion and error alerts

**Integration Pattern:** Incoming webhooks with rich message formatting

**Notification Types:**
- Workflow completion summary with execution metrics
- Error alerts with links to Application Insights traces
- Daily digest of workflow statistics
- Cost anomaly alerts when spending exceeds thresholds

**Configuration:** Per-team webhook URLs stored in Key Vault

## Data Flow Patterns

### Workflow Execution Flow
```
Developer → Web UI → .NET API → Workflow Created (Cosmos DB)
    ↓
Background Orchestrator → Python Agent Service → Azure OpenAI
    ↓
Checkpoint Saved (Cosmos DB) → Real-time Event (SignalR) → Web UI Update
```

### Authentication Flow
```
User → Web UI → Redirect to Azure AD Login
    ↓
Azure AD → ID Token + Access Token → Web UI
    ↓
API Request with Bearer Token → .NET API → Token Validation (Azure AD)
    ↓
Authorized Request → Business Logic Execution
```

### Monitoring Flow
```
All Services → OpenTelemetry Agent → Application Insights
    ↓
Application Insights → Metrics/Logs/Traces → Azure Monitor
    ↓
Alert Rules → Action Groups → Slack Notifications
```

## Security Architecture

### Zero-Trust Principles
- **Identity Verification:** All requests authenticated via Azure AD with MFA
- **Least Privilege:** RBAC enforced at API, database, and infrastructure layers
- **Micro-Segmentation:** Virtual network isolation with private endpoints
- **Continuous Monitoring:** Real-time threat detection via Azure Sentinel

### Defense in Depth
1. **Network Layer:** Azure Firewall, NSGs, DDoS Protection Standard
2. **Application Layer:** API Gateway with rate limiting, CORS, CSP headers
3. **Data Layer:** Encryption at rest (AES-256), in transit (TLS 1.3)
4. **Identity Layer:** Managed identities eliminate credential management

## Scalability Characteristics

### Horizontal Scaling
- **Stateless Services:** .NET API and Python Agent Service scale independently (2-50 instances)
- **Database Partitioning:** Cosmos DB partitioned by workflow ID with automatic sharding
- **SignalR Scaling:** SignalR Service supports 100K+ concurrent connections with multi-region deployment

### Vertical Scaling
- **Container Apps:** Up to 4 vCPU, 8GB RAM per instance
- **Cosmos DB:** Up to 1M RU/s per container
- **Redis Cache:** Up to 120GB per Premium tier node

## Performance Targets

| Metric | Target | Measurement |
|--------|--------|-------------|
| API Response Time (P95) | < 500ms | Application Insights |
| Workflow Start Latency | < 2s | Custom metric |
| Real-time Event Delay | < 50ms | SignalR telemetry |
| Checkpoint Write Latency | < 100ms | Cosmos DB metrics |
| Agent Execution Throughput | 100 tasks/min | Custom counter |

## Cost Optimization Strategies

1. **Serverless First:** Use Cosmos DB serverless and consumption-based pricing for variable workloads
2. **Auto-Scaling:** Scale down to minimum instances (2) during off-peak hours
3. **Cache Aggressively:** Redis caching reduces Cosmos DB read operations by 80%
4. **Prompt Optimization:** Reduce token usage through prompt engineering and caching
5. **Checkpoint Cleanup:** Automated deletion of checkpoints older than 30 days

## Related Documentation

- [C4 Container Diagram](c4-container.mmd) - Detailed container-level architecture
- [C4 Component Diagram](c4-orchestration-components.mmd) - Internal component structure
- [Data Flow Documentation](data-flows.md) - Comprehensive sequence diagrams
- [ADR-002: Meta-Agent Architecture](../adrs/002-meta-agent-architecture.md) - Architectural decision rationale

---

**Version:** 1.0.0
**Last Updated:** 2025-10-14
**Maintained By:** Architecture Team
**Review Cycle:** Quarterly or on major architecture changes

This system context establishes the foundation for understanding Agent Studio's role in streamlining AI agent orchestration across enterprise environments, designed to drive measurable outcomes through scalable, secure infrastructure.
