erDiagram
    WORKFLOW ||--o{ EXECUTION : "has many"
    WORKFLOW ||--o{ TASK : "contains"
    WORKFLOW ||--o{ QUALITY_GATE : "enforces"
    EXECUTION ||--o{ CHECKPOINT : "creates"
    EXECUTION ||--o{ EVENT : "emits"
    EXECUTION ||--o{ TASK_EXECUTION : "runs"
    TASK ||--o{ TASK_DEPENDENCY : "depends on"
    TASK ||--o{ TASK_EXECUTION : "executed as"
    TASK_EXECUTION ||--o{ AGENT_INVOCATION : "invokes"

    WORKFLOW {
        uuid id PK "Primary key"
        string name "Workflow name"
        string description "Description"
        string pattern "sequential, parallel, saga, event-driven"
        json definition "Full workflow DSL"
        string status "draft, active, archived"
        timestamp created_at "Creation timestamp"
        timestamp updated_at "Last update"
        string created_by "User ID"
        json metadata "Custom metadata"
    }

    EXECUTION {
        uuid id PK "Primary key"
        uuid workflow_id FK "References workflow"
        string status "pending, running, completed, failed, cancelled"
        json input "Execution input parameters"
        json output "Execution output results"
        json context "Execution context state"
        int retry_count "Number of retries"
        timestamp started_at "Start time"
        timestamp completed_at "Completion time"
        string triggered_by "User or system"
        json error "Error details if failed"
        int checkpoint_version "Current checkpoint version"
    }

    TASK {
        uuid id PK "Primary key"
        uuid workflow_id FK "References workflow"
        string name "Task name"
        string agent_type "Agent to execute task"
        json parameters "Task parameters"
        int estimated_hours "Effort estimate"
        int timeout_seconds "Timeout in seconds"
        int max_retries "Max retry attempts"
        json quality_gates "Pre/post task gates"
        int order "Execution order"
        boolean parallel_eligible "Can run in parallel"
    }

    TASK_DEPENDENCY {
        uuid id PK "Primary key"
        uuid task_id FK "References task"
        uuid depends_on_task_id FK "References task"
        string dependency_type "finish_to_start, start_to_start"
        json condition "Optional dependency condition"
    }

    TASK_EXECUTION {
        uuid id PK "Primary key"
        uuid execution_id FK "References execution"
        uuid task_id FK "References task"
        string status "pending, running, completed, failed, skipped"
        json input "Task input"
        json output "Task output"
        timestamp started_at "Start time"
        timestamp completed_at "Completion time"
        int duration_ms "Duration milliseconds"
        int retry_attempt "Current retry attempt"
        json error "Error if failed"
    }

    AGENT_INVOCATION {
        uuid id PK "Primary key"
        uuid task_execution_id FK "References task execution"
        string agent_type "Agent type invoked"
        json request "Agent request payload"
        json response "Agent response payload"
        timestamp invoked_at "Invocation time"
        timestamp completed_at "Completion time"
        int duration_ms "Duration milliseconds"
        string status "success, failure, timeout"
        json metrics "Performance metrics"
    }

    CHECKPOINT {
        uuid id PK "Primary key"
        uuid execution_id FK "References execution"
        int version "Checkpoint version number"
        json snapshot "State snapshot"
        string status "State status at checkpoint"
        timestamp created_at "Checkpoint creation time"
        int size_bytes "Snapshot size"
        string checkpoint_type "manual, automatic, pre_failure"
    }

    EVENT {
        uuid id PK "Primary key"
        uuid execution_id FK "References execution"
        string event_type "workflow.started, task.completed, etc"
        json payload "Event data"
        timestamp timestamp "Event timestamp"
        string source "Event source"
        int sequence_number "Event sequence in stream"
        json metadata "Additional metadata"
    }

    QUALITY_GATE {
        uuid id PK "Primary key"
        uuid workflow_id FK "References workflow"
        string gate_type "pre_task, post_task, pre_phase, post_phase"
        string validator "Agent or rule to validate"
        json condition "Gate condition"
        boolean blocking "Blocks execution if fails"
        int order "Evaluation order"
    }
