%%{init: {'theme':'base', 'themeVariables': { 'primaryColor':'#10b981', 'primaryTextColor':'#fff', 'primaryBorderColor':'#059669', 'lineColor':'#5c5c5c', 'secondaryColor':'#ef4444', 'tertiaryColor':'#3b82f6'}}}%%

graph TB
    subgraph "Load Distribution Layer"
        tm["Traffic Manager<br/>DNS-based routing<br/>---<br/>Geographic distribution<br/>Performance routing<br/>Weighted round-robin"]
        cdn["CDN Edge Nodes<br/>100+ POPs globally<br/>---<br/>Static content caching<br/>Dynamic acceleration<br/>DDoS protection"]
        agw["Application Gateway (x2)<br/>Zone redundant<br/>---<br/>L7 load balancing<br/>WAF protection<br/>Autoscaling 2-125 units"]
    end

    subgraph "Horizontal Scaling - Application Tier"
        subgraph "Web App Scaling Group"
            subgraph "Zone 1"
                web1["Web App<br/>Instance 1-3<br/>---<br/>2 vCPU<br/>4GB RAM"]
            end
            subgraph "Zone 2"
                web2["Web App<br/>Instance 4-6<br/>---<br/>2 vCPU<br/>4GB RAM"]
            end
            subgraph "Zone 3"
                web3["Web App<br/>Instance 7-10<br/>---<br/>2 vCPU<br/>4GB RAM"]
            end
            webscale["<b>Scaling Rules:</b><br/>Min: 2, Max: 10<br/>CPU > 70% → +2<br/>CPU < 30% → -1<br/>Scale-out: 1 min<br/>Scale-in: 5 min"]
        end

        subgraph "API Service Scaling Group"
            subgraph "Zone 1"
                api1["API Service<br/>Instance 1-7<br/>---<br/>4 vCPU<br/>8GB RAM"]
            end
            subgraph "Zone 2"
                api2["API Service<br/>Instance 8-14<br/>---<br/>4 vCPU<br/>8GB RAM"]
            end
            subgraph "Zone 3"
                api3["API Service<br/>Instance 15-20<br/>---<br/>4 vCPU<br/>8GB RAM"]
            end
            apiscale["<b>Scaling Rules:</b><br/>Min: 3, Max: 20<br/>Req/sec > 1000 → +3<br/>Queue > 100 → +2<br/>Memory > 80% → +1<br/>P95 latency > 500ms → +2"]
        end

        subgraph "Agent Service Scaling Group"
            subgraph "Zone 1"
                agent1["Agent Service<br/>Instance 1-17<br/>---<br/>4 vCPU<br/>16GB RAM<br/>GPU optional"]
            end
            subgraph "Zone 2"
                agent2["Agent Service<br/>Instance 18-34<br/>---<br/>4 vCPU<br/>16GB RAM<br/>GPU optional"]
            end
            subgraph "Zone 3"
                agent3["Agent Service<br/>Instance 35-50<br/>---<br/>4 vCPU<br/>16GB RAM<br/>GPU optional"]
            end
            agentscale["<b>Scaling Rules:</b><br/>Min: 5, Max: 50<br/>Active tasks > 100 → +5<br/>LLM queue > 50 → +3<br/>GPU util > 80% → +2<br/>Token rate > 10K/s → +5"]
        end
    end

    subgraph "Vertical Scaling - Data Tier"
        subgraph "Cosmos DB Scaling"
            cosmospart["<b>Partitioning Strategy</b><br/>Partition Key: WorkflowID<br/>---<br/>Logical Partitions: Unlimited<br/>Physical Partitions: Auto-managed<br/>Max size/partition: 20GB<br/>Max RU/partition: 10K"]
            cosmosscale["<b>Throughput Scaling</b><br/>---<br/>Autoscale: 400-4000 RU/s<br/>Manual: 400-unlimited<br/>Serverless: Pay-per-request<br/>Global distribution: 3 regions"]
        end

        subgraph "Redis Cache Scaling"
            rediscluster["<b>Cluster Configuration</b><br/>---<br/>Master nodes: 3<br/>Replica nodes: 6<br/>Shards: 10<br/>Total memory: 120GB"]
            redisscale["<b>Scaling Strategy</b><br/>---<br/>Vertical: C0 → C6 (250MB-120GB)<br/>Horizontal: 1-10 shards<br/>Geo-replication: Active-passive<br/>Persistence: AOF every 1 sec"]
        end

        subgraph "Storage Account Scaling"
            storagetier["<b>Tiering Strategy</b><br/>---<br/>Hot: < 7 days (SSD)<br/>Cool: 7-30 days (HDD)<br/>Archive: > 30 days (Offline)<br/>Lifecycle policies: Automated"]
            storagescale["<b>Performance Tiers</b><br/>---<br/>Standard: 60MB/s per blob<br/>Premium: 100MB/s per blob<br/>Throughput: 10 Gbps ingress<br/>IOPS: 20,000 per account"]
        end
    end

    subgraph "Queue & Message Scaling"
        subgraph "Service Bus Scaling"
            sbqueue["<b>Queue Configuration</b><br/>---<br/>Max size: 80GB<br/>Partitions: 16<br/>Sessions: Enabled<br/>Duplicate detection: 10 min"]
            sbtopic["<b>Topic Configuration</b><br/>---<br/>Subscriptions: 2000<br/>Rules/subscription: 2000<br/>Max message size: 1MB<br/>TTL: 14 days"]
        end

        subgraph "Event Hub Scaling"
            ehpartition["<b>Partition Strategy</b><br/>---<br/>Partitions: 32<br/>Throughput units: 20<br/>Events/sec: 1M<br/>Retention: 7 days"]
            ehcapture["<b>Auto-inflate</b><br/>---<br/>Min TU: 2<br/>Max TU: 20<br/>Trigger: 70% capacity<br/>Capture to Storage: 5 min"]
        end
    end

    subgraph "Auto-Scaling Metrics & Triggers"
        metrics["<b>Key Metrics</b><br/>---<br/>• CPU Utilization<br/>• Memory Usage<br/>• Request Rate<br/>• Response Time<br/>• Queue Length<br/>• Active Connections<br/>• Error Rate<br/>• Custom Metrics"]

        triggers["<b>Scaling Triggers</b><br/>---<br/>• Schedule-based<br/>• Metric-based<br/>• Predictive (ML)<br/>• Event-driven<br/>• Manual override"]

        policies["<b>Scaling Policies</b><br/>---<br/>• Conservative (Prod)<br/>• Aggressive (Dev)<br/>• Cost-optimized<br/>• Performance-first<br/>• Burst handling"]
    end

    subgraph "Cost Optimization"
        reserved["<b>Reserved Capacity</b><br/>---<br/>• VMs: 3-year RI (72% savings)<br/>• Cosmos: Reserved RUs (65% savings)<br/>• Storage: Reserved (38% savings)"]

        spot["<b>Spot Instances</b><br/>---<br/>• Dev/Test: 90% discount<br/>• Batch jobs: Interruptible<br/>• Agent pool: Mixed mode"]

        rightsizing["<b>Right-Sizing</b><br/>---<br/>• Weekly reviews<br/>• Advisor recommendations<br/>• Unused resource cleanup<br/>• SKU optimization"]
    end

    tm --> cdn
    cdn --> agw
    agw --> web1
    agw --> web2
    agw --> web3

    web1 --> api1
    web2 --> api2
    web3 --> api3

    api1 --> agent1
    api2 --> agent2
    api3 --> agent3

    agent1 --> cosmospart
    agent2 --> rediscluster
    agent3 --> storagetier

    api1 --> sbqueue
    api2 --> sbtopic
    agent1 --> ehpartition

    metrics --> triggers
    triggers --> policies
    policies --> webscale
    policies --> apiscale
    policies --> agentscale

    webscale -.->|Scale decision| web1
    apiscale -.->|Scale decision| api1
    agentscale -.->|Scale decision| agent1

    cosmosscale -.->|RU adjustment| cosmospart
    redisscale -.->|Shard adjustment| rediscluster
    storagescale -.->|Tier migration| storagetier

    reserved --> rightsizing
    spot --> rightsizing
    rightsizing -.->|Optimize| agentscale

    classDef lb fill:#e1f5fe,stroke:#01579b,color:#000
    classDef web fill:#61dafb,stroke:#4fa8c5,color:#000
    classDef api fill:#512bd4,stroke:#3a1f9d,color:#fff
    classDef agent fill:#8b5cf6,stroke:#7c3aed,color:#fff
    classDef data fill:#10b981,stroke:#059669,color:#fff
    classDef queue fill:#f59e0b,stroke:#d97706,color:#000
    classDef metric fill:#ef4444,stroke:#dc2626,color:#fff
    classDef cost fill:#06b6d4,stroke:#0891b2,color:#fff

    class tm,cdn,agw lb
    class web1,web2,web3,webscale web
    class api1,api2,api3,apiscale api
    class agent1,agent2,agent3,agentscale agent
    class cosmospart,cosmosscale,rediscluster,redisscale,storagetier,storagescale data
    class sbqueue,sbtopic,ehpartition,ehcapture queue
    class metrics,triggers,policies metric
    class reserved,spot,rightsizing cost