%% Service Mesh Architecture
%% Shows service-to-service communication with Istio/Linkerd
%% Establishes observable, secure microservice communication patterns
%% Version: 1.0
%% Last Updated: 2025-10-14

graph TB
    subgraph "Ingress Layer"
        ingress_gw["Istio Ingress Gateway<br/>---<br/>External traffic entry<br/>TLS termination"]
        virtual_service["Virtual Services<br/>---<br/>Request routing<br/>Traffic policies"]
    end

    subgraph "Service Mesh Control Plane"
        istiod["Istiod<br/>---<br/>Service discovery<br/>Config distribution"]
        pilot["Pilot<br/>---<br/>Traffic management<br/>Service registry"]
        citadel["Citadel<br/>---<br/>Certificate management<br/>mTLS rotation"]
        galley["Galley<br/>---<br/>Config validation<br/>Processing"]
    end

    subgraph "Data Plane - Frontend Services"
        subgraph "Web App Service"
            webapp_pod["Web App Pod"]
            webapp_sidecar["Envoy Proxy<br/>---<br/>Sidecar container<br/>Traffic interception"]
        end

        subgraph "BFF Service"
            bff_pod["BFF Pod"]
            bff_sidecar["Envoy Proxy<br/>---<br/>Request/response<br/>transformation"]
        end
    end

    subgraph "Data Plane - Core Services"
        subgraph "Orchestration Service"
            orch_pod["Orchestration Pod"]
            orch_sidecar["Envoy Proxy<br/>---<br/>Load balancing<br/>Circuit breaking"]
            orch_replica1["Replica 1"]
            orch_replica2["Replica 2"]
            orch_replica3["Replica 3"]
        end

        subgraph "Agent Service"
            agent_pod["Agent Pod"]
            agent_sidecar["Envoy Proxy<br/>---<br/>Retry logic<br/>Timeout handling"]
            agent_replica1["Replica 1"]
            agent_replica2["Replica 2"]
            agent_replica3["Replica 3"]
            agent_replica4["Replica 4"]
            agent_replica5["Replica 5"]
        end

        subgraph "Workflow Service"
            workflow_pod["Workflow Pod"]
            workflow_sidecar["Envoy Proxy<br/>---<br/>Request hedging<br/>Fault injection"]
        end
    end

    subgraph "Data Plane - Backend Services"
        subgraph "Cache Service"
            cache_pod["Cache Pod"]
            cache_sidecar["Envoy Proxy<br/>---<br/>Connection pooling<br/>Health checks"]
        end

        subgraph "Database Service"
            db_pod["Database Proxy"]
            db_sidecar["Envoy Proxy<br/>---<br/>SQL routing<br/>Read/write split"]
        end

        subgraph "Storage Service"
            storage_pod["Storage Pod"]
            storage_sidecar["Envoy Proxy<br/>---<br/>Rate limiting<br/>Quota enforcement"]
        end
    end

    subgraph "Observability Stack"
        prometheus["Prometheus<br/>---<br/>Metrics collection<br/>Service mesh metrics"]
        grafana["Grafana<br/>---<br/>Dashboards<br/>Mesh visualization"]
        jaeger["Jaeger<br/>---<br/>Distributed tracing<br/>Latency analysis"]
        kiali["Kiali<br/>---<br/>Service mesh console<br/>Traffic topology"]
    end

    subgraph "Traffic Policies"
        destination_rule["Destination Rules<br/>---<br/>Load balancing<br/>Connection pools"]
        service_entry["Service Entries<br/>---<br/>External services<br/>Egress control"]
        auth_policy["Authorization Policy<br/>---<br/>RBAC rules<br/>JWT validation"]
        peer_auth["Peer Authentication<br/>---<br/>mTLS mode<br/>STRICT/PERMISSIVE"]
    end

    %% Ingress flow
    ingress_gw --> virtual_service
    virtual_service --> webapp_sidecar

    %% Control plane management
    istiod --> webapp_sidecar
    istiod --> bff_sidecar
    istiod --> orch_sidecar
    istiod --> agent_sidecar
    pilot --> destination_rule
    citadel --> peer_auth
    galley --> auth_policy

    %% Service communication through sidecars
    webapp_pod <--> webapp_sidecar
    webapp_sidecar <-->|mTLS| bff_sidecar
    bff_pod <--> bff_sidecar

    bff_sidecar <-->|mTLS| orch_sidecar
    orch_pod <--> orch_sidecar
    orch_sidecar --> orch_replica1
    orch_sidecar --> orch_replica2
    orch_sidecar --> orch_replica3

    orch_sidecar <-->|mTLS| agent_sidecar
    agent_pod <--> agent_sidecar
    agent_sidecar --> agent_replica1
    agent_sidecar --> agent_replica2
    agent_sidecar --> agent_replica3
    agent_sidecar --> agent_replica4
    agent_sidecar --> agent_replica5

    orch_sidecar <-->|mTLS| workflow_sidecar
    workflow_pod <--> workflow_sidecar

    agent_sidecar <-->|mTLS| cache_sidecar
    cache_pod <--> cache_sidecar

    agent_sidecar <-->|mTLS| db_sidecar
    db_pod <--> db_sidecar

    agent_sidecar <-->|mTLS| storage_sidecar
    storage_pod <--> storage_sidecar

    %% Observability connections
    webapp_sidecar -->|Metrics| prometheus
    bff_sidecar -->|Metrics| prometheus
    orch_sidecar -->|Metrics| prometheus
    agent_sidecar -->|Traces| jaeger
    prometheus --> grafana
    jaeger --> kiali

    %% Policy application
    destination_rule -.->|Apply| orch_sidecar
    service_entry -.->|Apply| agent_sidecar
    auth_policy -.->|Apply| webapp_sidecar
    peer_auth -.->|Apply| bff_sidecar

    %% Apply semantic color coding
    classDef ingress fill:#f59e0b,stroke:#d97706,color:#000,stroke-width:3px
    classDef control fill:#3eaf7c,stroke:#2d8659,color:#fff,stroke-width:2px
    classDef sidecar fill:#ec4899,stroke:#db2777,color:#fff,stroke-width:2px
    classDef service fill:#0078d4,stroke:#005a9e,color:#fff,stroke-width:2px
    classDef replica fill:#94a3b8,stroke:#64748b,color:#fff,stroke-width:1px
    classDef observability fill:#10b981,stroke:#059669,color:#fff,stroke-width:2px
    classDef policy fill:#8b5cf6,stroke:#7c3aed,color:#fff,stroke-width:2px,stroke-dasharray: 5 5

    class ingress_gw,virtual_service ingress
    class istiod,pilot,citadel,galley control
    class webapp_sidecar,bff_sidecar,orch_sidecar,agent_sidecar,workflow_sidecar,cache_sidecar,db_sidecar,storage_sidecar sidecar
    class webapp_pod,bff_pod,orch_pod,agent_pod,workflow_pod,cache_pod,db_pod,storage_pod service
    class orch_replica1,orch_replica2,orch_replica3,agent_replica1,agent_replica2,agent_replica3,agent_replica4,agent_replica5 replica
    class prometheus,grafana,jaeger,kiali observability
    class destination_rule,service_entry,auth_policy,peer_auth policy