%% Event-Driven Architecture Pattern
%% Shows asynchronous event-based communication between services
%% Establishes scalable, decoupled service integration patterns
%% Version: 1.0
%% Last Updated: 2025-10-14

graph TB
    subgraph "Event Producers"
        workflow_producer["Workflow Service<br/>---<br/>Workflow events<br/>State changes"]
        agent_producer["Agent Service<br/>---<br/>Task events<br/>Completion status"]
        user_producer["User Service<br/>---<br/>User events<br/>Profile updates"]
        system_producer["System Monitor<br/>---<br/>System events<br/>Health alerts"]
    end

    subgraph "Event Backbone"
        subgraph "Azure Event Grid"
            event_grid["Event Grid<br/>---<br/>Event routing<br/>Topic management"]

            subgraph "Topics"
                workflow_topic["Workflow Topic<br/>---<br/>workflow.*"]
                agent_topic["Agent Topic<br/>---<br/>agent.*"]
                system_topic["System Topic<br/>---<br/>system.*"]
                domain_topic["Domain Topic<br/>---<br/>domain.*"]
            end

            subgraph "Event Types"
                workflow_events["Workflow Events<br/>---<br/>started/completed<br/>failed/paused"]
                agent_events["Agent Events<br/>---<br/>task.started<br/>task.completed"]
                system_events["System Events<br/>---<br/>health.degraded<br/>resource.scaled"]
                domain_events["Domain Events<br/>---<br/>user.created<br/>order.placed"]
            end
        end

        subgraph "Azure Service Bus"
            service_bus["Service Bus<br/>---<br/>Message broker<br/>Dead letter queue"]

            subgraph "Queues"
                command_queue["Command Queue<br/>---<br/>FIFO processing<br/>At-least-once"]
                priority_queue["Priority Queue<br/>---<br/>Priority ordering<br/>Express messages"]
                dlq["Dead Letter Queue<br/>---<br/>Failed messages<br/>Manual inspection"]
            end

            subgraph "Topics & Subscriptions"
                notification_topic["Notification Topic"]
                email_subscription["Email Subscription<br/>---<br/>Filter: email"]
                sms_subscription["SMS Subscription<br/>---<br/>Filter: sms"]
                push_subscription["Push Subscription<br/>---<br/>Filter: push"]
            end
        end

        subgraph "Event Store"
            event_store_db["Event Store DB<br/>---<br/>Cosmos DB<br/>Append-only log"]
            event_snapshots["Event Snapshots<br/>---<br/>Materialized views<br/>Performance cache"]
            event_projections["Event Projections<br/>---<br/>Read models<br/>CQRS pattern"]
        end
    end

    subgraph "Event Consumers"
        subgraph "Reactive Services"
            notification_handler["Notification Handler<br/>---<br/>Send notifications<br/>Multi-channel"]
            analytics_processor["Analytics Processor<br/>---<br/>Real-time analytics<br/>Stream processing"]
            audit_logger["Audit Logger<br/>---<br/>Compliance logging<br/>Immutable records"]
        end

        subgraph "Saga Orchestrators"
            workflow_saga["Workflow Saga<br/>---<br/>Long-running process<br/>Compensation logic"]
            order_saga["Order Saga<br/>---<br/>Multi-step transaction<br/>Rollback handling"]
        end

        subgraph "Event Processors"
            stream_processor["Stream Processor<br/>---<br/>Azure Stream Analytics<br/>Window functions"]
            batch_processor["Batch Processor<br/>---<br/>Azure Functions<br/>Scheduled processing"]
            ml_processor["ML Processor<br/>---<br/>Pattern detection<br/>Anomaly alerts"]
        end

        subgraph "Integration Adapters"
            webhook_dispatcher["Webhook Dispatcher<br/>---<br/>External webhooks<br/>Retry logic"]
            database_projector["Database Projector<br/>---<br/>Update read DB<br/>Denormalization"]
            cache_invalidator["Cache Invalidator<br/>---<br/>Redis updates<br/>TTL management"]
        end
    end

    subgraph "Event Schema Registry"
        schema_registry["Schema Registry<br/>---<br/>Event schemas<br/>Version control"]
        schema_validator["Schema Validator<br/>---<br/>Validation rules<br/>Compatibility check"]
        schema_evolution["Schema Evolution<br/>---<br/>Migration paths<br/>Backward compat"]
    end

    %% Producer connections
    workflow_producer -->|Publish| workflow_topic
    agent_producer -->|Publish| agent_topic
    user_producer -->|Publish| domain_topic
    system_producer -->|Publish| system_topic

    %% Event Grid routing
    workflow_topic --> workflow_events
    agent_topic --> agent_events
    system_topic --> system_events
    domain_topic --> domain_events

    event_grid --> service_bus
    event_grid --> event_store_db

    %% Service Bus routing
    workflow_events -->|Queue| command_queue
    agent_events -->|Queue| priority_queue
    domain_events -->|Topic| notification_topic

    notification_topic --> email_subscription
    notification_topic --> sms_subscription
    notification_topic --> push_subscription

    %% Event Store
    event_store_db --> event_snapshots
    event_store_db --> event_projections

    %% Consumer connections
    email_subscription --> notification_handler
    command_queue --> workflow_saga
    priority_queue --> order_saga

    workflow_events --> analytics_processor
    system_events --> audit_logger

    event_grid --> stream_processor
    event_projections --> batch_processor
    stream_processor --> ml_processor

    domain_events --> webhook_dispatcher
    event_projections --> database_projector
    workflow_events --> cache_invalidator

    %% Schema validation
    workflow_producer -.->|Validate| schema_validator
    schema_validator --> schema_registry
    schema_registry --> schema_evolution

    %% Failed message handling
    command_queue -->|Failed| dlq
    priority_queue -->|Failed| dlq
    dlq --> audit_logger

    %% Apply semantic color coding
    classDef producer fill:#3eaf7c,stroke:#2d8659,color:#fff,stroke-width:2px
    classDef backbone fill:#f59e0b,stroke:#d97706,color:#000,stroke-width:3px
    classDef topic fill:#0078d4,stroke:#005a9e,color:#fff,stroke-width:2px
    classDef consumer fill:#8b5cf6,stroke:#7c3aed,color:#fff,stroke-width:2px
    classDef saga fill:#ec4899,stroke:#db2777,color:#fff,stroke-width:2px
    classDef processor fill:#10b981,stroke:#059669,color:#fff,stroke-width:2px
    classDef schema fill:#94a3b8,stroke:#64748b,color:#fff,stroke-width:2px
    classDef store fill:#336791,stroke:#254a6b,color:#fff,stroke-width:2px

    class workflow_producer,agent_producer,user_producer,system_producer producer
    class event_grid,service_bus backbone
    class workflow_topic,agent_topic,system_topic,domain_topic,notification_topic topic
    class notification_handler,analytics_processor,audit_logger consumer
    class workflow_saga,order_saga saga
    class stream_processor,batch_processor,ml_processor,webhook_dispatcher,database_projector,cache_invalidator processor
    class schema_registry,schema_validator,schema_evolution schema
    class event_store_db,event_snapshots,event_projections store