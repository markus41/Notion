%% Saga Pattern - Real-World Order Processing Example
%% Shows distributed transaction with compensation logic
%% Establishes reliable multi-service transactions with rollback capability
%% Version: 1.0
%% Last Updated: 2025-10-14

stateDiagram-v2
    [*] --> OrderReceived: New Order

    OrderReceived --> ValidateOrder: Start Saga
    note right of OrderReceived
        Order ID: ORD-2025-001
        Customer: CUST-123
        Total: $1,250.00
        Items: 3
    end note

    ValidateOrder --> ReserveInventory: Order Valid
    ValidateOrder --> OrderRejected: Invalid Order

    state ReserveInventory {
        [*] --> CheckStock
        CheckStock --> LockItems: Available
        CheckStock --> OutOfStock: Unavailable
        LockItems --> RecordReservation
        RecordReservation --> [*]
    }
    note right of ReserveInventory
        Service: Inventory
        Timeout: 30 sec
        Compensation: ReleaseInventory
    end note

    ReserveInventory --> ProcessPayment: Items Reserved
    ReserveInventory --> CompensateStart: Reservation Failed

    state ProcessPayment {
        [*] --> AuthorizeCard
        AuthorizeCard --> ChargeAmount: Authorized
        AuthorizeCard --> PaymentFailed: Declined
        ChargeAmount --> RecordTransaction
        RecordTransaction --> [*]
    }
    note right of ProcessPayment
        Service: Payment
        Timeout: 45 sec
        Compensation: RefundPayment
    end note

    ProcessPayment --> AllocateShipping: Payment Successful
    ProcessPayment --> CompensatePayment: Payment Failed

    state AllocateShipping {
        [*] --> SelectCarrier
        SelectCarrier --> ReserveSlot
        ReserveSlot --> GenerateLabel
        GenerateLabel --> [*]
    }
    note right of AllocateShipping
        Service: Shipping
        Timeout: 20 sec
        Compensation: CancelShipping
    end note

    AllocateShipping --> SendConfirmation: Shipping Allocated
    AllocateShipping --> CompensateShipping: Allocation Failed

    state SendConfirmation {
        [*] --> GenerateEmail
        GenerateEmail --> QueueEmail
        QueueEmail --> SendEmail
        SendEmail --> [*]
    }
    note right of SendConfirmation
        Service: Notification
        Async: true
        No compensation needed
    end note

    SendConfirmation --> UpdateOrderStatus: Email Sent

    state UpdateOrderStatus {
        [*] --> SetStatus
        SetStatus --> PublishEvent
        PublishEvent --> [*]
    }

    UpdateOrderStatus --> OrderComplete: Status Updated

    OrderComplete --> [*]: Saga Complete

    %% Compensation flow
    CompensateStart --> CompensateInventory
    CompensatePayment --> CompensateInventory
    CompensateShipping --> CompensatePayment

    state CompensateInventory {
        [*] --> ReleaseItems
        ReleaseItems --> UpdateStock
        UpdateStock --> LogRelease
        LogRelease --> [*]
    }
    note left of CompensateInventory
        Compensation: Inventory
        Action: Release reserved items
        Update stock counts
    end note

    state CompensatePayment {
        [*] --> InitiateRefund
        InitiateRefund --> ProcessRefund
        ProcessRefund --> LogRefund
        LogRefund --> [*]
    }
    note left of CompensatePayment
        Compensation: Payment
        Action: Refund charged amount
        Async refund processing
    end note

    state CompensateShipping {
        [*] --> CancelLabel
        CancelLabel --> ReleaseSlot
        ReleaseSlot --> LogCancellation
        LogCancellation --> [*]
    }
    note left of CompensateShipping
        Compensation: Shipping
        Action: Cancel shipping label
        Release delivery slot
    end note

    CompensateInventory --> SendCancellation

    state SendCancellation {
        [*] --> GenerateCancelEmail
        GenerateCancelEmail --> QueueCancelEmail
        QueueCancelEmail --> SendCancelEmail
        SendCancelEmail --> [*]
    }

    SendCancellation --> OrderCancelled
    OrderCancelled --> [*]: Saga Rolled Back
    OrderRejected --> [*]: Order Rejected

    %% Parallel compensation tracking
    state CompensationLog {
        [*] --> LogStart
        LogStart --> TrackProgress
        TrackProgress --> VerifyComplete
        VerifyComplete --> [*]
    }
    note right of CompensationLog
        Tracks all compensations
        Ensures idempotency
        Audit trail
    end note