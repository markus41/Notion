stateDiagram-v2
    [*] --> Initialize: Workflow Start

    state parallel_fork <<fork>>
    Initialize --> parallel_fork: Dependencies Resolved

    parallel_fork --> TaskA: Branch 1
    parallel_fork --> TaskB: Branch 2
    parallel_fork --> TaskC: Branch 3

    TaskA --> CheckpointA: Complete
    TaskB --> CheckpointB: Complete
    TaskC --> CheckpointC: Complete

    state parallel_join <<join>>
    CheckpointA --> parallel_join
    CheckpointB --> parallel_join
    CheckpointC --> parallel_join

    parallel_join --> Aggregate: All Complete
    Aggregate --> [*]: Success

    TaskA --> ErrorA: Failed
    TaskB --> ErrorB: Failed
    TaskC --> ErrorC: Failed

    ErrorA --> CancelOthers: Critical Failure
    ErrorB --> CancelOthers: Critical Failure
    ErrorC --> CancelOthers: Critical Failure

    CancelOthers --> Cleanup: Stop All Tasks
    Cleanup --> [*]: Workflow Failed

    note right of Initialize
        Load workflow definition
        Analyze dependencies
        Detect parallelizable tasks
        Allocate resources
    end note

    note right of TaskA
        Agent: frontend-engineer
        Task: Build React UI
        Estimated: 2 hours
        Independent: Yes
    end note

    note right of TaskB
        Agent: code-generator-typescript
        Task: Build API Layer
        Estimated: 3 hours
        Independent: Yes
    end note

    note right of TaskC
        Agent: test-engineer
        Task: Write E2E Tests
        Estimated: 2.5 hours
        Independent: Yes
    end note

    note right of Aggregate
        Merge results
        Validate outputs
        Check quality gates
        Generate summary
    end note

    note right of CancelOthers
        Signal cancellation
        Wait for graceful shutdown
        Rollback partial changes
        Log failure reason
    end note
