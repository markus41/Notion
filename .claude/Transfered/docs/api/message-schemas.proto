// Protocol Buffer schema definitions for Agent Studio
// Version: 1.0.0
//
// These schemas define the message formats for communication between
// .NET Orchestrator and Python Agents when using gRPC or Protocol Buffers

syntax = "proto3";

package agentstudio.v1;

option csharp_namespace = "AgentStudio.Messages.V1";
option go_package = "github.com/agentstudio/api/v1;v1";
option java_package = "com.agentstudio.api.v1";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

// ============================================================================
// Task Execution Messages
// ============================================================================

// Request to execute a task on an agent
message TaskRequest {
  string task_id = 1;                           // Unique task identifier
  string agent_id = 2;                          // Target agent ID
  string workflow_id = 3;                       // Parent workflow ID (optional)
  string task_type = 4;                         // Type of task (e.g., "analyze", "collect")
  google.protobuf.Struct input = 5;             // Task input data (flexible structure)
  Priority priority = 6;                        // Task priority
  google.protobuf.Duration timeout = 7;         // Maximum execution time
  string callback_url = 8;                      // Optional callback URL
  google.protobuf.Struct metadata = 9;          // Additional metadata
  RetryPolicy retry_policy = 10;                // Retry configuration
  string idempotency_key = 11;                  // For idempotent requests
}

// Response to task execution request
message TaskResponse {
  string task_id = 1;                           // Task identifier
  TaskStatus status = 2;                        // Current task status
  string agent_id = 3;                          // Assigned agent ID
  string workflow_id = 4;                       // Parent workflow ID
  google.protobuf.Timestamp created_at = 5;     // Task creation time
  google.protobuf.Timestamp estimated_completion = 6; // Estimated completion time
  string status_url = 7;                        // URL to check status
}

// Detailed task information
message TaskDetail {
  string task_id = 1;
  TaskStatus status = 2;
  string agent_id = 3;
  string workflow_id = 4;
  string task_type = 5;
  Priority priority = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp started_at = 8;
  google.protobuf.Timestamp completed_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  TaskProgress progress = 11;
  TaskMetrics metrics = 12;
  TaskError error = 13;
}

// Task execution progress
message TaskProgress {
  float percentage = 1;                         // 0-100
  string current_step = 2;                      // Description of current step
  int32 total_steps = 3;                        // Total number of steps
  int32 completed_steps = 4;                    // Number of completed steps
  string message = 5;                           // Human-readable progress message
  google.protobuf.Timestamp estimated_completion = 6;
}

// Task execution metrics
message TaskMetrics {
  float cpu_usage_percent = 1;
  int64 memory_usage_mb = 2;
  int64 execution_time_seconds = 3;
  int64 tokens_consumed = 4;
  int32 api_calls_made = 5;
}

// Task execution error
message TaskError {
  string code = 1;                              // Machine-readable error code
  string message = 2;                           // Human-readable error message
  google.protobuf.Struct details = 3;           // Additional error details
  string stack_trace = 4;                       // Stack trace (optional)
  int32 retry_after_seconds = 5;                // Suggested retry delay
}

// Task execution result
message TaskResult {
  string task_id = 1;
  TaskStatus status = 2;
  google.protobuf.Timestamp completed_at = 3;
  int64 execution_time_seconds = 4;
  google.protobuf.Struct result = 5;            // Task output data
  repeated Artifact artifacts = 6;              // Output artifacts
  google.protobuf.Struct metadata = 7;          // Additional metadata
  string trace_id = 8;                          // OpenTelemetry trace ID
}

// Output artifact
message Artifact {
  string name = 1;                              // Artifact filename
  string url = 2;                               // Storage URL
  int64 size_bytes = 3;                         // File size
  string content_type = 4;                      // MIME type
  string checksum = 5;                          // SHA-256 checksum
  google.protobuf.Timestamp expires_at = 6;     // Expiration time
}

// ============================================================================
// Callback Messages (Agent â†’ Orchestrator)
// ============================================================================

// Progress update from agent
message ProgressUpdate {
  string task_id = 1;
  string workflow_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  TaskProgress progress = 4;
  TaskMetrics metrics = 5;
  TraceContext trace_context = 6;
}

// Completion notification from agent
message CompletionNotification {
  string task_id = 1;
  string workflow_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  CompletionStatus status = 4;
  int64 execution_time_seconds = 5;
  google.protobuf.Struct result = 6;
  repeated Artifact artifacts = 7;
  ExecutionMetrics metrics = 8;
  google.protobuf.Struct metadata = 9;
  TraceContext trace_context = 10;
}

// Execution metrics for completed task
message ExecutionMetrics {
  int64 total_items_processed = 1;
  double average_processing_time_ms = 2;
  int64 peak_memory_usage_mb = 3;
  int32 total_api_calls = 4;
  int64 total_tokens_consumed = 5;
}

// Error notification from agent
message ErrorNotification {
  string task_id = 1;
  string workflow_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  ErrorDetails error = 4;
  google.protobuf.Struct context = 5;
  repeated ValidationError validation_errors = 6;
  string stack_trace = 7;
  TraceContext trace_context = 8;
}

// Detailed error information
message ErrorDetails {
  string code = 1;
  string message = 2;
  ErrorType type = 3;
  ErrorSeverity severity = 4;
  bool retry_recommended = 5;
  int32 retry_after_seconds = 6;
}

// Validation error
message ValidationError {
  string field = 1;
  string message = 2;
  string provided_value = 3;
}

// Handoff request from agent
message HandoffRequest {
  string task_id = 1;
  string workflow_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  HandoffReason reason = 4;
  string target_agent_id = 5;                   // Preferred target agent (optional)
  string required_capability = 6;               // Required capability
  google.protobuf.Struct context = 7;           // Execution context to transfer
  string message = 8;                           // Human-readable explanation
  bool preserve_state = 9;                      // Preserve execution state
  TraceContext trace_context = 10;
}

// Handoff response from orchestrator
message HandoffResponse {
  bool acknowledged = 1;
  string task_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string request_id = 4;
  HandoffDecision decision = 5;
  string target_agent_id = 6;                   // Target agent (if approved)
  string message = 7;
  repeated string instructions = 8;
  string alternative_action = 9;
}

// Agent heartbeat
message Heartbeat {
  string agent_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  AgentHealthStatus status = 3;
  repeated ActiveTask active_tasks = 4;
  AgentResourceMetrics metrics = 5;
  repeated string capabilities = 6;
  string version = 7;
  repeated HealthIssue health_issues = 8;
}

// Active task summary
message ActiveTask {
  string task_id = 1;
  google.protobuf.Timestamp started_at = 2;
  float progress_percentage = 3;
}

// Agent resource metrics
message AgentResourceMetrics {
  float cpu_usage_percent = 1;
  int64 memory_usage_mb = 2;
  int64 memory_total_mb = 3;
  float disk_usage_percent = 4;
  double network_throughput_mbps = 5;
  int32 active_connections = 6;
}

// Health issue
message HealthIssue {
  string code = 1;
  ErrorSeverity severity = 2;
  string message = 3;
}

// ============================================================================
// Agent Management Messages
// ============================================================================

// Agent registration
message AgentRegistration {
  string agent_id = 1;
  string name = 2;
  string version = 3;
  repeated string capabilities = 4;
  google.protobuf.Struct configuration = 5;
  google.protobuf.Struct metadata = 6;
}

// Agent information
message AgentInfo {
  string agent_id = 1;
  string name = 2;
  string version = 3;
  AgentStatus status = 4;
  repeated string capabilities = 5;
  HealthStatus health = 6;
  AgentPerformanceMetrics metrics = 7;
  AgentResources resources = 8;
  google.protobuf.Struct configuration = 9;
  google.protobuf.Timestamp registered_at = 10;
  google.protobuf.Timestamp last_heartbeat = 11;
}

// Agent performance metrics
message AgentPerformanceMetrics {
  int32 tasks_completed_24h = 1;
  double average_execution_time_seconds = 2;
  float success_rate_percent = 3;
  float current_load_percent = 4;
}

// Agent resources
message AgentResources {
  int32 cpu_cores = 1;
  int64 memory_total_mb = 2;
  int64 memory_available_mb = 3;
}

// Health status
message HealthStatus {
  AgentHealthStatus status = 1;
  google.protobuf.Timestamp last_heartbeat = 2;
  int64 uptime_seconds = 3;
  google.protobuf.Timestamp timestamp = 4;
  map<string, HealthCheck> checks = 5;
}

// Individual health check
message HealthCheck {
  HealthCheckStatus status = 1;
  string message = 2;
  double response_time_ms = 3;
}

// ============================================================================
// Workflow Messages
// ============================================================================

// Workflow definition
message Workflow {
  string id = 1;
  string name = 2;
  string description = 3;
  WorkflowType type = 4;
  WorkflowStatus status = 5;
  repeated WorkflowStep steps = 6;
  repeated string tags = 7;
  int32 timeout_seconds = 8;
  RetryPolicy retry_policy = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  string created_by = 12;
  int32 version = 13;
}

// Workflow step
message WorkflowStep {
  string id = 1;
  string name = 2;
  string agent_id = 3;
  string task_type = 4;
  repeated string depends_on = 5;
  google.protobuf.Struct config = 6;
  int32 timeout_seconds = 7;
}

// Workflow execution
message WorkflowExecution {
  string id = 1;
  string workflow_id = 2;
  string workflow_name = 3;
  ExecutionStatus status = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
  int64 duration_seconds = 7;
  string triggered_by = 8;
  google.protobuf.Struct input_data = 9;
  string trace_id = 10;
  WorkflowExecutionMetrics metrics = 11;
}

// Workflow execution metrics
message WorkflowExecutionMetrics {
  int32 total_tasks = 1;
  int32 successful_tasks = 2;
  int32 failed_tasks = 3;
  double average_task_duration_seconds = 4;
  int64 total_tokens_used = 5;
  double total_cost = 6;
}

// ============================================================================
// Common Messages
// ============================================================================

// Retry policy
message RetryPolicy {
  int32 max_attempts = 1;
  BackoffType backoff_type = 2;
  int32 initial_delay_seconds = 3;
  int32 max_delay_seconds = 4;
}

// Trace context for OpenTelemetry
message TraceContext {
  string trace_id = 1;                          // W3C Trace Context format
  string span_id = 2;
  string trace_flags = 3;
}

// Callback acknowledgment
message CallbackAck {
  bool acknowledged = 1;
  string task_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string request_id = 4;
}

// Pagination
message Pagination {
  int32 page = 1;
  int32 page_size = 2;
  int64 total_items = 3;
  int32 total_pages = 4;
  bool has_next = 5;
  bool has_previous = 6;
}

// ============================================================================
// Enumerations
// ============================================================================

enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;
  TASK_STATUS_QUEUED = 2;
  TASK_STATUS_RUNNING = 3;
  TASK_STATUS_COMPLETED = 4;
  TASK_STATUS_FAILED = 5;
  TASK_STATUS_CANCELLED = 6;
}

enum Priority {
  PRIORITY_UNSPECIFIED = 0;
  PRIORITY_LOW = 1;
  PRIORITY_NORMAL = 2;
  PRIORITY_HIGH = 3;
  PRIORITY_CRITICAL = 4;
}

enum CompletionStatus {
  COMPLETION_STATUS_UNSPECIFIED = 0;
  COMPLETION_STATUS_COMPLETED = 1;
  COMPLETION_STATUS_PARTIAL_SUCCESS = 2;
}

enum ErrorType {
  ERROR_TYPE_UNSPECIFIED = 0;
  ERROR_TYPE_TRANSIENT = 1;
  ERROR_TYPE_PERMANENT = 2;
  ERROR_TYPE_FATAL = 3;
}

enum ErrorSeverity {
  ERROR_SEVERITY_UNSPECIFIED = 0;
  ERROR_SEVERITY_INFO = 1;
  ERROR_SEVERITY_WARNING = 2;
  ERROR_SEVERITY_ERROR = 3;
  ERROR_SEVERITY_CRITICAL = 4;
}

enum HandoffReason {
  HANDOFF_REASON_UNSPECIFIED = 0;
  HANDOFF_REASON_REQUIRES_CAPABILITY = 1;
  HANDOFF_REASON_LOAD_BALANCING = 2;
  HANDOFF_REASON_WORKFLOW_ROUTING = 3;
  HANDOFF_REASON_ERROR_RECOVERY = 4;
}

enum HandoffDecision {
  HANDOFF_DECISION_UNSPECIFIED = 0;
  HANDOFF_DECISION_APPROVED = 1;
  HANDOFF_DECISION_REJECTED = 2;
  HANDOFF_DECISION_ALTERNATIVE_SUGGESTED = 3;
}

enum AgentStatus {
  AGENT_STATUS_UNSPECIFIED = 0;
  AGENT_STATUS_ONLINE = 1;
  AGENT_STATUS_OFFLINE = 2;
  AGENT_STATUS_DEGRADED = 3;
  AGENT_STATUS_MAINTENANCE = 4;
}

enum AgentHealthStatus {
  AGENT_HEALTH_STATUS_UNSPECIFIED = 0;
  AGENT_HEALTH_STATUS_HEALTHY = 1;
  AGENT_HEALTH_STATUS_DEGRADED = 2;
  AGENT_HEALTH_STATUS_UNHEALTHY = 3;
}

enum HealthCheckStatus {
  HEALTH_CHECK_STATUS_UNSPECIFIED = 0;
  HEALTH_CHECK_STATUS_PASS = 1;
  HEALTH_CHECK_STATUS_FAIL = 2;
  HEALTH_CHECK_STATUS_WARN = 3;
}

enum WorkflowType {
  WORKFLOW_TYPE_UNSPECIFIED = 0;
  WORKFLOW_TYPE_SEQUENTIAL = 1;
  WORKFLOW_TYPE_CONCURRENT = 2;
  WORKFLOW_TYPE_GROUP_CHAT = 3;
  WORKFLOW_TYPE_HANDOFF = 4;
}

enum WorkflowStatus {
  WORKFLOW_STATUS_UNSPECIFIED = 0;
  WORKFLOW_STATUS_DRAFT = 1;
  WORKFLOW_STATUS_ACTIVE = 2;
  WORKFLOW_STATUS_ARCHIVED = 3;
}

enum ExecutionStatus {
  EXECUTION_STATUS_UNSPECIFIED = 0;
  EXECUTION_STATUS_PENDING = 1;
  EXECUTION_STATUS_RUNNING = 2;
  EXECUTION_STATUS_COMPLETED = 3;
  EXECUTION_STATUS_FAILED = 4;
  EXECUTION_STATUS_CANCELLED = 5;
}

enum BackoffType {
  BACKOFF_TYPE_UNSPECIFIED = 0;
  BACKOFF_TYPE_FIXED = 1;
  BACKOFF_TYPE_LINEAR = 2;
  BACKOFF_TYPE_EXPONENTIAL = 3;
}

// ============================================================================
// gRPC Service Definitions (Optional - for gRPC implementation)
// ============================================================================

service AgentControlService {
  // Execute a task on an agent
  rpc ExecuteTask(TaskRequest) returns (TaskResponse);

  // Get task status
  rpc GetTaskStatus(TaskStatusRequest) returns (TaskDetail);

  // Cancel a running task
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);

  // Get task results
  rpc GetTaskResults(TaskResultsRequest) returns (TaskResult);

  // Stream task logs
  rpc StreamTaskLogs(TaskLogsRequest) returns (stream LogMessage);

  // List agents
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);

  // Get agent details
  rpc GetAgent(GetAgentRequest) returns (AgentInfo);

  // Get agent health
  rpc GetAgentHealth(GetAgentHealthRequest) returns (HealthStatus);
}

service AgentCallbackService {
  // Report task progress
  rpc ReportProgress(ProgressUpdate) returns (CallbackAck);

  // Report task completion
  rpc ReportCompletion(CompletionNotification) returns (CallbackAck);

  // Report task error
  rpc ReportError(ErrorNotification) returns (ErrorCallbackResponse);

  // Request handoff
  rpc RequestHandoff(HandoffRequest) returns (HandoffResponse);

  // Send heartbeat
  rpc SendHeartbeat(Heartbeat) returns (HeartbeatResponse);
}

// Supporting request/response messages for gRPC

message TaskStatusRequest {
  string task_id = 1;
}

message CancelTaskRequest {
  string task_id = 1;
  bool force = 2;
}

message CancelTaskResponse {
  string task_id = 1;
  TaskStatus status = 2;
  string message = 3;
  google.protobuf.Timestamp cancelled_at = 4;
}

message TaskResultsRequest {
  string task_id = 1;
  string format = 2;  // json, msgpack, protobuf
}

message TaskLogsRequest {
  string task_id = 1;
  bool follow = 2;
  int32 tail = 3;
  google.protobuf.Timestamp since = 4;
}

message LogMessage {
  string task_id = 1;
  string workflow_id = 2;
  string agent_id = 3;
  google.protobuf.Timestamp timestamp = 4;
  LogLevel level = 5;
  string message = 6;
  string source = 7;
  google.protobuf.Struct metadata = 8;
  string trace_id = 9;
  string span_id = 10;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 1;
  LOG_LEVEL_INFO = 2;
  LOG_LEVEL_WARNING = 3;
  LOG_LEVEL_ERROR = 4;
  LOG_LEVEL_CRITICAL = 5;
}

message ListAgentsRequest {
  AgentStatus status = 1;
  string capability = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message ListAgentsResponse {
  repeated AgentInfo agents = 1;
  Pagination pagination = 2;
}

message GetAgentRequest {
  string agent_id = 1;
}

message GetAgentHealthRequest {
  string agent_id = 1;
}

message ErrorCallbackResponse {
  bool acknowledged = 1;
  string task_id = 2;
  google.protobuf.Timestamp timestamp = 3;
  string request_id = 4;
  ErrorAction action = 5;
  int32 retry_after_seconds = 6;
}

enum ErrorAction {
  ERROR_ACTION_UNSPECIFIED = 0;
  ERROR_ACTION_RETRY = 1;
  ERROR_ACTION_FAIL = 2;
  ERROR_ACTION_ESCALATE = 3;
}

message HeartbeatResponse {
  bool acknowledged = 1;
  google.protobuf.Timestamp timestamp = 2;
  repeated string instructions = 3;
}
