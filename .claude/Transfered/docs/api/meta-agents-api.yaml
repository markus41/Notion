openapi: 3.1.0
info:
  title: Meta-Agent Platform API
  version: 1.0.0
  description: |
    API for orchestrating meta-agent workflows (Architect, Builder, Validator, Scribe).

    This API enables the .NET orchestrator to coordinate complex multi-agent workflows
    where specialized agents collaborate to design, build, validate, and document software.

    ## Meta-Agent Types

    - **Architect**: System design, architecture decisions, technical specifications
    - **Builder**: Code generation, implementation, refactoring
    - **Validator**: Testing, quality assurance, code review
    - **Scribe**: Documentation, technical writing, API specifications

    ## Workflow Patterns

    - **Sequential**: Architect → Builder → Validator → Scribe
    - **Parallel**: Multiple builders working on different components
    - **Iterative**: Builder ↔ Validator feedback loops
    - **Dynamic**: Agent handoffs based on task requirements

  contact:
    name: Agent Studio API Team
    email: api@agentstudio.dev
    url: https://docs.agentstudio.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.agentstudio.dev/meta-agents/v1
    description: Production
  - url: https://staging-api.agentstudio.dev/meta-agents/v1
    description: Staging
  - url: http://localhost:5000/meta-agents/v1
    description: Local development

tags:
  - name: Workflows
    description: Meta-agent workflow execution and management
  - name: Agents
    description: Meta-agent registration and status
  - name: Handoffs
    description: Agent-to-agent handoff coordination
  - name: Artifacts
    description: Generated artifacts (code, docs, diagrams)
  - name: Thoughts
    description: Agent reasoning and decision tracking

security:
  - bearerAuth: []
  - apiKey: []

paths:
  /workflows:
    post:
      tags: [Workflows]
      summary: Execute meta-agent workflow
      description: |
        Initiates a meta-agent workflow with specified type and configuration.

        The workflow will automatically orchestrate the appropriate agents based on
        the workflow type and task requirements.

      operationId: executeWorkflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequest'
            examples:
              sequential:
                summary: Sequential workflow (full SDLC)
                value:
                  type: sequential
                  description: Build a REST API with authentication
                  agents:
                    - type: architect
                      config:
                        focus_areas: [api_design, security, scalability]
                    - type: builder
                      config:
                        language: typescript
                        framework: express
                    - type: validator
                      config:
                        test_types: [unit, integration, security]
                    - type: scribe
                      config:
                        output_formats: [openapi, markdown]
                  context:
                    project_name: user-auth-api
                    requirements: |
                      Create a REST API for user authentication with:
                      - JWT token-based auth
                      - Password reset flow
                      - Rate limiting
                      - OpenAPI documentation
                  priority: normal
                  timeout_minutes: 30
              parallel:
                summary: Parallel builders (microservices)
                value:
                  type: parallel
                  description: Build multiple microservices simultaneously
                  agents:
                    - type: architect
                      config:
                        focus_areas: [microservices, event_driven]
                    - type: builder
                      id: builder_users
                      config:
                        service: users-service
                        language: python
                    - type: builder
                      id: builder_orders
                      config:
                        service: orders-service
                        language: typescript
                    - type: validator
                      config:
                        test_types: [integration, e2e]
                  context:
                    architecture_style: event-driven microservices
              iterative:
                summary: Iterative Builder-Validator loop
                value:
                  type: iterative
                  description: Build with continuous validation feedback
                  agents:
                    - type: builder
                      config:
                        language: python
                        framework: fastapi
                    - type: validator
                      config:
                        test_types: [unit, integration]
                        coverage_threshold: 80
                  context:
                    max_iterations: 3
                    fail_fast: false
      responses:
        '202':
          description: Workflow accepted and queued for execution
          headers:
            Location:
              description: URL to track workflow status
              schema:
                type: string
                format: uri
                example: /meta-agents/v1/workflows/wf_abc123
            X-Workflow-ID:
              description: Unique workflow identifier
              schema:
                type: string
                example: wf_abc123
            X-RateLimit-Limit:
              $ref: '#/components/headers/X-RateLimit-Limit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
              example:
                workflow_id: wf_abc123
                status: queued
                type: sequential
                agents:
                  - agent_id: arch_001
                    type: architect
                    status: pending
                  - agent_id: build_002
                    type: builder
                    status: pending
                  - agent_id: valid_003
                    type: validator
                    status: pending
                  - agent_id: scribe_004
                    type: scribe
                    status: pending
                created_at: '2025-10-07T10:00:00Z'
                estimated_completion: '2025-10-07T10:30:00Z'
                status_url: /meta-agents/v1/workflows/wf_abc123
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags: [Workflows]
      summary: List workflows
      description: Retrieve a paginated list of meta-agent workflows
      operationId: listWorkflows
      parameters:
        - name: status
          in: query
          description: Filter by workflow status
          schema:
            type: string
            enum: [queued, running, completed, failed, cancelled]
        - name: type
          in: query
          description: Filter by workflow type
          schema:
            type: string
            enum: [sequential, parallel, iterative, dynamic]
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of results to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sort
          in: query
          description: Sort field and direction
          schema:
            type: string
            enum: [created_at_asc, created_at_desc, updated_at_asc, updated_at_desc]
            default: created_at_desc
      responses:
        '200':
          description: List of workflows
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /workflows/{workflowId}:
    parameters:
      - $ref: '#/components/parameters/WorkflowId'

    get:
      tags: [Workflows]
      summary: Get workflow status
      description: Retrieve detailed status and results of a workflow
      operationId: getWorkflow
      responses:
        '200':
          description: Workflow details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDetail'
              example:
                workflow_id: wf_abc123
                status: running
                type: sequential
                description: Build a REST API with authentication
                progress:
                  percentage: 60
                  current_step: validator
                  completed_agents: [architect, builder]
                  pending_agents: [validator, scribe]
                agents:
                  - agent_id: arch_001
                    type: architect
                    status: completed
                    started_at: '2025-10-07T10:00:00Z'
                    completed_at: '2025-10-07T10:05:00Z'
                    duration_seconds: 300
                    output_summary: Designed REST API architecture with JWT auth
                  - agent_id: build_002
                    type: builder
                    status: completed
                    started_at: '2025-10-07T10:05:00Z'
                    completed_at: '2025-10-07T10:20:00Z'
                    duration_seconds: 900
                    output_summary: Generated TypeScript Express API with 15 endpoints
                  - agent_id: valid_003
                    type: validator
                    status: running
                    started_at: '2025-10-07T10:20:00Z'
                    progress:
                      percentage: 50
                      message: Running integration tests
                created_at: '2025-10-07T10:00:00Z'
                updated_at: '2025-10-07T10:21:00Z'
                estimated_completion: '2025-10-07T10:30:00Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags: [Workflows]
      summary: Cancel workflow
      description: Cancel a running workflow and all associated agent tasks
      operationId: cancelWorkflow
      responses:
        '200':
          description: Workflow cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow_id:
                    type: string
                  status:
                    type: string
                    enum: [cancelled]
                  cancelled_at:
                    type: string
                    format: date-time
                  message:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Workflow cannot be cancelled (already completed or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /workflows/{workflowId}/results:
    parameters:
      - $ref: '#/components/parameters/WorkflowId'

    get:
      tags: [Workflows]
      summary: Get workflow results
      description: Retrieve final results and artifacts from a completed workflow
      operationId: getWorkflowResults
      responses:
        '200':
          description: Workflow results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResults'
              example:
                workflow_id: wf_abc123
                status: completed
                results:
                  architect:
                    decisions:
                      - decision: Use JWT for authentication
                        rationale: Industry standard, stateless, scalable
                      - decision: Implement rate limiting with Redis
                        rationale: Prevent abuse, protect resources
                    artifacts:
                      - type: architecture_diagram
                        url: /artifacts/wf_abc123/architecture.png
                      - type: technical_spec
                        url: /artifacts/wf_abc123/spec.md
                  builder:
                    code_generated:
                      files_created: 42
                      lines_of_code: 3567
                      language: typescript
                    artifacts:
                      - type: source_code
                        url: /artifacts/wf_abc123/source.zip
                      - type: package_json
                        url: /artifacts/wf_abc123/package.json
                  validator:
                    tests_run: 87
                    tests_passed: 87
                    tests_failed: 0
                    coverage_percentage: 92.5
                    artifacts:
                      - type: test_report
                        url: /artifacts/wf_abc123/test-report.html
                      - type: coverage_report
                        url: /artifacts/wf_abc123/coverage.html
                  scribe:
                    documents_created: 5
                    artifacts:
                      - type: openapi_spec
                        url: /artifacts/wf_abc123/openapi.yaml
                      - type: readme
                        url: /artifacts/wf_abc123/README.md
                      - type: api_docs
                        url: /artifacts/wf_abc123/api-docs.html
                completed_at: '2025-10-07T10:30:00Z'
                duration_seconds: 1800
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Workflow not yet completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /workflows/{workflowId}/thoughts:
    parameters:
      - $ref: '#/components/parameters/WorkflowId'

    get:
      tags: [Thoughts]
      summary: Get agent thoughts
      description: |
        Retrieve the reasoning, decisions, and thought processes from all agents
        in the workflow. Useful for debugging and understanding agent behavior.
      operationId: getWorkflowThoughts
      parameters:
        - name: agent_type
          in: query
          description: Filter thoughts by agent type
          schema:
            type: string
            enum: [architect, builder, validator, scribe]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
      responses:
        '200':
          description: Agent thoughts
          content:
            application/json:
              schema:
                type: object
                properties:
                  workflow_id:
                    type: string
                  thoughts:
                    type: array
                    items:
                      $ref: '#/components/schemas/AgentThought'
              example:
                workflow_id: wf_abc123
                thoughts:
                  - agent_id: arch_001
                    agent_type: architect
                    timestamp: '2025-10-07T10:01:30Z'
                    thought_type: decision
                    content: Choosing JWT over sessions for better scalability
                    confidence: 0.95
                    reasoning: |
                      JWT tokens are stateless, which allows horizontal scaling
                      without session store dependencies. They are also widely
                      supported and have good tooling.
                  - agent_id: build_002
                    agent_type: builder
                    timestamp: '2025-10-07T10:10:15Z'
                    thought_type: implementation
                    content: Using bcrypt for password hashing
                    confidence: 0.99
                    reasoning: Industry best practice, adjustable cost factor
        '404':
          $ref: '#/components/responses/NotFound'

  /handoffs:
    post:
      tags: [Handoffs]
      summary: Request agent handoff
      description: |
        Request to hand off a task from one agent to another. This is typically
        initiated by a Python agent when it determines another agent is better
        suited to complete a task.
      operationId: requestHandoff
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandoffRequest'
            examples:
              builder_to_architect:
                summary: Builder needs architectural guidance
                value:
                  workflow_id: wf_abc123
                  from_agent_id: build_002
                  from_agent_type: builder
                  to_agent_type: architect
                  reason: Need guidance on database schema design
                  context:
                    current_task: Implementing user model
                    question: Should we use SQL or NoSQL for user data?
                    considerations:
                      - High read/write ratio
                      - Complex relationships
                      - ACID requirements
              validator_to_builder:
                summary: Validator found issues
                value:
                  workflow_id: wf_abc123
                  from_agent_id: valid_003
                  from_agent_type: validator
                  to_agent_type: builder
                  reason: Tests failing, code needs fixes
                  context:
                    failing_tests: 12
                    test_results_url: /artifacts/wf_abc123/test-failures.json
                    priority: high
      responses:
        '200':
          description: Handoff approved and executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandoffResponse'
              example:
                handoff_id: ho_xyz789
                status: approved
                target_agent_id: arch_001
                estimated_completion: '2025-10-07T10:35:00Z'
                message: Architect agent will provide database schema guidance
        '202':
          description: Handoff request accepted, pending approval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HandoffResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /artifacts:
    get:
      tags: [Artifacts]
      summary: List artifacts
      description: Retrieve artifacts generated by meta-agents
      operationId: listArtifacts
      parameters:
        - name: workflow_id
          in: query
          required: true
          schema:
            type: string
        - name: agent_type
          in: query
          schema:
            type: string
            enum: [architect, builder, validator, scribe]
        - name: artifact_type
          in: query
          schema:
            type: string
            enum: [source_code, test_report, documentation, diagram, specification]
      responses:
        '200':
          description: List of artifacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  artifacts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Artifact'
                  total:
                    type: integer

  /artifacts/{artifactId}:
    parameters:
      - name: artifactId
        in: path
        required: true
        schema:
          type: string

    get:
      tags: [Artifacts]
      summary: Download artifact
      description: Download a specific artifact (code, docs, diagrams, etc.)
      operationId: downloadArtifact
      responses:
        '200':
          description: Artifact content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
            text/plain:
              schema:
                type: string
            image/png:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'

  /agents:
    get:
      tags: [Agents]
      summary: List registered meta-agents
      description: Get list of all registered meta-agents and their current status
      operationId: listMetaAgents
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [architect, builder, validator, scribe]
        - name: status
          in: query
          schema:
            type: string
            enum: [available, busy, offline]
      responses:
        '200':
          description: List of meta-agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  agents:
                    type: array
                    items:
                      $ref: '#/components/schemas/MetaAgent'

  /agents/{agentId}/health:
    parameters:
      - name: agentId
        in: path
        required: true
        schema:
          type: string

    get:
      tags: [Agents]
      summary: Get agent health
      description: Check health status and metrics for a specific meta-agent
      operationId: getAgentHealth
      responses:
        '200':
          description: Agent health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHealth'

  /health:
    get:
      tags: [System]
      summary: System health check
      description: Overall health status of meta-agent platform
      operationId: getHealth
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  components:
                    type: object
                    properties:
                      orchestrator:
                        type: string
                        enum: [healthy, unhealthy]
                      meta_agents:
                        type: object
                        properties:
                          architect:
                            type: string
                          builder:
                            type: string
                          validator:
                            type: string
                          scribe:
                            type: string
                      database:
                        type: string
                      cache:
                        type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoint
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  parameters:
    WorkflowId:
      name: workflowId
      in: path
      required: true
      description: Unique workflow identifier
      schema:
        type: string
        pattern: '^wf_[a-zA-Z0-9]{10,}$'
        example: wf_abc123

  headers:
    X-RateLimit-Limit:
      description: Maximum requests allowed in time window
      schema:
        type: integer
        example: 1000
    X-RateLimit-Remaining:
      description: Remaining requests in current window
      schema:
        type: integer
        example: 950
    X-RateLimit-Reset:
      description: Unix timestamp when rate limit resets
      schema:
        type: integer
        example: 1696680000

  schemas:
    WorkflowRequest:
      type: object
      required:
        - type
        - description
        - agents
      properties:
        type:
          type: string
          enum: [sequential, parallel, iterative, dynamic]
          description: Workflow execution pattern
        description:
          type: string
          minLength: 10
          maxLength: 2000
          description: Description of what the workflow should accomplish
        agents:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - type
            properties:
              type:
                type: string
                enum: [architect, builder, validator, scribe]
              id:
                type: string
                description: Optional custom identifier for this agent instance
              config:
                type: object
                description: Agent-specific configuration
                additionalProperties: true
        context:
          type: object
          description: Additional context for the workflow
          additionalProperties: true
        priority:
          type: string
          enum: [low, normal, high, critical]
          default: normal
        timeout_minutes:
          type: integer
          minimum: 1
          maximum: 180
          default: 30
        metadata:
          type: object
          description: Custom metadata for tracking
          additionalProperties: true

    WorkflowResponse:
      type: object
      properties:
        workflow_id:
          type: string
        status:
          type: string
          enum: [queued, running, completed, failed, cancelled]
        type:
          type: string
        agents:
          type: array
          items:
            type: object
            properties:
              agent_id:
                type: string
              type:
                type: string
              status:
                type: string
        created_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time
        status_url:
          type: string
          format: uri

    WorkflowList:
      type: object
      properties:
        workflows:
          type: array
          items:
            type: object
            properties:
              workflow_id:
                type: string
              type:
                type: string
              description:
                type: string
              status:
                type: string
              created_at:
                type: string
                format: date-time
              completed_at:
                type: string
                format: date-time
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        has_more:
          type: boolean

    WorkflowDetail:
      type: object
      properties:
        workflow_id:
          type: string
        status:
          type: string
        type:
          type: string
        description:
          type: string
        progress:
          type: object
          properties:
            percentage:
              type: number
              minimum: 0
              maximum: 100
            current_step:
              type: string
            completed_agents:
              type: array
              items:
                type: string
            pending_agents:
              type: array
              items:
                type: string
        agents:
          type: array
          items:
            type: object
            properties:
              agent_id:
                type: string
              type:
                type: string
              status:
                type: string
              started_at:
                type: string
                format: date-time
              completed_at:
                type: string
                format: date-time
              duration_seconds:
                type: integer
              output_summary:
                type: string
              progress:
                type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        estimated_completion:
          type: string
          format: date-time

    WorkflowResults:
      type: object
      properties:
        workflow_id:
          type: string
        status:
          type: string
        results:
          type: object
          description: Results from each agent, keyed by agent type
          additionalProperties:
            type: object
        completed_at:
          type: string
          format: date-time
        duration_seconds:
          type: integer

    AgentThought:
      type: object
      properties:
        agent_id:
          type: string
        agent_type:
          type: string
          enum: [architect, builder, validator, scribe]
        timestamp:
          type: string
          format: date-time
        thought_type:
          type: string
          enum: [decision, observation, question, implementation, validation]
        content:
          type: string
          description: The thought content
        confidence:
          type: number
          minimum: 0
          maximum: 1
          description: Confidence level (0-1)
        reasoning:
          type: string
          description: Detailed reasoning behind the thought
        metadata:
          type: object
          additionalProperties: true

    HandoffRequest:
      type: object
      required:
        - workflow_id
        - from_agent_id
        - from_agent_type
        - to_agent_type
        - reason
      properties:
        workflow_id:
          type: string
        from_agent_id:
          type: string
        from_agent_type:
          type: string
          enum: [architect, builder, validator, scribe]
        to_agent_type:
          type: string
          enum: [architect, builder, validator, scribe]
        reason:
          type: string
          minLength: 10
        context:
          type: object
          description: Context for the handoff
          additionalProperties: true
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal

    HandoffResponse:
      type: object
      properties:
        handoff_id:
          type: string
        status:
          type: string
          enum: [approved, pending, rejected]
        target_agent_id:
          type: string
        estimated_completion:
          type: string
          format: date-time
        message:
          type: string

    Artifact:
      type: object
      properties:
        artifact_id:
          type: string
        workflow_id:
          type: string
        agent_id:
          type: string
        agent_type:
          type: string
        artifact_type:
          type: string
          enum: [source_code, test_report, documentation, diagram, specification, configuration]
        name:
          type: string
        description:
          type: string
        url:
          type: string
          format: uri
        content_type:
          type: string
        size_bytes:
          type: integer
        created_at:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties: true

    MetaAgent:
      type: object
      properties:
        agent_id:
          type: string
        type:
          type: string
          enum: [architect, builder, validator, scribe]
        status:
          type: string
          enum: [available, busy, offline]
        version:
          type: string
        capabilities:
          type: array
          items:
            type: string
        current_workflow_id:
          type: string
        registered_at:
          type: string
          format: date-time
        last_heartbeat:
          type: string
          format: date-time

    AgentHealth:
      type: object
      properties:
        agent_id:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        uptime_seconds:
          type: integer
        tasks_completed:
          type: integer
        tasks_failed:
          type: integer
        average_task_duration_seconds:
          type: number
        current_load:
          type: number
          description: CPU/memory load (0-1)
        last_heartbeat:
          type: string
          format: date-time
        metrics:
          type: object
          properties:
            cpu_percent:
              type: number
            memory_mb:
              type: number
            active_tasks:
              type: integer

    ProblemDetails:
      type: object
      description: RFC 7807 Problem Details for HTTP APIs
      properties:
        type:
          type: string
          format: uri
          description: URI reference identifying the problem type
          example: https://api.agentstudio.dev/problems/validation-error
        title:
          type: string
          description: Short, human-readable summary
          example: Validation Error
        status:
          type: integer
          description: HTTP status code
          example: 422
        detail:
          type: string
          description: Human-readable explanation
          example: The workflow type 'invalid' is not supported
        instance:
          type: string
          format: uri
          description: URI reference to specific occurrence
          example: /meta-agents/v1/workflows
        errors:
          type: array
          description: Detailed validation errors
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/bad-request
            title: Bad Request
            status: 400
            detail: Request body is malformed JSON
            instance: /meta-agents/v1/workflows

    Unauthorized:
      description: Unauthorized - invalid or missing credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/unauthorized
            title: Unauthorized
            status: 401
            detail: Invalid or expired JWT token
            instance: /meta-agents/v1/workflows

    ValidationError:
      description: Validation error - invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/validation-error
            title: Validation Error
            status: 422
            detail: Request validation failed
            instance: /meta-agents/v1/workflows
            errors:
              - field: agents
                message: At least one agent is required
                code: MIN_ITEMS
              - field: type
                message: Workflow type must be one of [sequential, parallel, iterative, dynamic]
                code: ENUM_MISMATCH

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/not-found
            title: Not Found
            status: 404
            detail: Workflow with ID 'wf_abc123' not found
            instance: /meta-agents/v1/workflows/wf_abc123

    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          $ref: '#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          schema:
            type: integer
            example: 0
        X-RateLimit-Reset:
          $ref: '#/components/headers/X-RateLimit-Reset'
        Retry-After:
          description: Seconds to wait before retrying
          schema:
            type: integer
            example: 60
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/rate-limit-exceeded
            title: Rate Limit Exceeded
            status: 429
            detail: You have exceeded the rate limit of 1000 requests per hour
            instance: /meta-agents/v1/workflows

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          example:
            type: https://api.agentstudio.dev/problems/internal-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred while processing your request
            instance: /meta-agents/v1/workflows
            trace_id: 1a2b3c4d5e6f
