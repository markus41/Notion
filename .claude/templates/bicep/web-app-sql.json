{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.33.27573",
      "templateHash": "11181337114394606309"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "metadata": {
        "description": "Environment name (dev, staging, prod)"
      }
    },
    "prefix": {
      "type": "string",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "Workload name used for resource naming"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "sqlAdminLogin": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server administrator login (stored in Key Vault)"
      }
    },
    "sqlAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "SQL Server administrator password (stored in Key Vault)"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[tenant().tenantId]",
      "metadata": {
        "description": "Azure AD tenant ID for authentication"
      }
    },
    "runtimeStack": {
      "type": "string",
      "defaultValue": "PYTHON|3.11",
      "allowedValues": [
        "PYTHON|3.11",
        "NODE|18-lts",
        "DOTNET|8.0"
      ],
      "metadata": {
        "description": "Application runtime stack"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "Environment": "[parameters('environment')]",
        "ManagedBy": "ClaudeCode",
        "Workload": "[parameters('prefix')]"
      },
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    }
  },
  "variables": {
    "appServicePlanName": "[format('plan-{0}-{1}', parameters('prefix'), parameters('environment'))]",
    "webAppName": "[format('app-{0}-{1}', parameters('prefix'), parameters('environment'))]",
    "sqlServerName": "[format('sql-{0}-{1}', parameters('prefix'), parameters('environment'))]",
    "sqlDatabaseName": "[format('{0}db', parameters('prefix'))]",
    "keyVaultName": "[format('kv-{0}-{1}', parameters('prefix'), substring(parameters('environment'), 0, 3))]",
    "appInsightsName": "[format('appi-{0}-{1}', parameters('prefix'), parameters('environment'))]",
    "logAnalyticsName": "[format('law-{0}-{1}', parameters('prefix'), parameters('environment'))]",
    "storageAccountName": "[format('st{0}{1}', replace(parameters('prefix'), '-', ''), substring(parameters('environment'), 0, 3))]",
    "skuConfig": {
      "dev": {
        "appServicePlan": {
          "name": "B1",
          "tier": "Basic",
          "capacity": 1
        },
        "sqlDatabase": {
          "name": "Basic",
          "tier": "Basic",
          "capacity": 5,
          "maxSizeBytes": 2147483648
        },
        "storage": "Standard_LRS",
        "alwaysOn": false,
        "autoPauseDelay": 60,
        "geoRedundantBackup": false
      },
      "staging": {
        "appServicePlan": {
          "name": "S1",
          "tier": "Standard",
          "capacity": 1
        },
        "sqlDatabase": {
          "name": "S2",
          "tier": "Standard",
          "capacity": 50,
          "maxSizeBytes": 268435456000
        },
        "storage": "Standard_LRS",
        "alwaysOn": true,
        "autoPauseDelay": -1,
        "geoRedundantBackup": false
      },
      "prod": {
        "appServicePlan": {
          "name": "P1v2",
          "tier": "PremiumV2",
          "capacity": 2
        },
        "sqlDatabase": {
          "name": "S2",
          "tier": "Standard",
          "capacity": 50,
          "maxSizeBytes": 268435456000
        },
        "storage": "Standard_GRS",
        "alwaysOn": true,
        "autoPauseDelay": -1,
        "geoRedundantBackup": true
      }
    },
    "currentSku": "[variables('skuConfig')[parameters('environment')]]"
  },
  "resources": {
    "logAnalytics": {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 30)]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    "appInsights": {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "RetentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 30)]",
        "SamplingPercentage": "[if(equals(parameters('environment'), 'prod'), 100, 50)]"
      },
      "dependsOn": [
        "logAnalytics"
      ]
    },
    "appServicePlan": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('currentSku').appServicePlan.name]",
        "tier": "[variables('currentSku').appServicePlan.tier]",
        "capacity": "[variables('currentSku').appServicePlan.capacity]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true,
        "zoneRedundant": "[equals(parameters('environment'), 'prod')]"
      }
    },
    "webApp": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-09-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "httpsOnly": true,
        "clientAffinityEnabled": false,
        "siteConfig": {
          "linuxFxVersion": "[parameters('runtimeStack')]",
          "alwaysOn": "[variables('currentSku').alwaysOn]",
          "minTlsVersion": "1.2",
          "ftpsState": "Disabled",
          "http20Enabled": true,
          "healthCheckPath": "/health",
          "appSettings": [
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference('appInsights').ConnectionString]"
            },
            {
              "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "AZURE_KEYVAULT_URI",
              "value": "[reference('keyVault').vaultUri]"
            },
            {
              "name": "ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            }
          ],
          "cors": {
            "allowedOrigins": "[if(equals(parameters('environment'), 'prod'), createArray(), createArray('http://localhost:3000', 'http://localhost:8000'))]",
            "supportCredentials": false
          }
        }
      },
      "dependsOn": [
        "appInsights",
        "appServicePlan",
        "keyVault"
      ]
    },
    "webAppDiagnostics": {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Web/sites/{0}', variables('webAppName'))]",
      "name": "diagnostics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "logs": [
          {
            "category": "AppServiceHTTPLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          },
          {
            "category": "AppServiceConsoleLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          },
          {
            "category": "AppServiceAppLogs",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          }
        ]
      },
      "dependsOn": [
        "logAnalytics",
        "webApp"
      ]
    },
    "sqlServer": {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2023-05-01-preview",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "administratorLogin": "[parameters('sqlAdminLogin')]",
        "administratorLoginPassword": "[parameters('sqlAdminPassword')]",
        "minimalTlsVersion": "1.2",
        "publicNetworkAccess": "Enabled",
        "administrators": {
          "administratorType": "ActiveDirectory",
          "principalType": "Application",
          "login": "[variables('webAppName')]",
          "sid": "[reference('webApp', '2022-09-01', 'full').identity.principalId]",
          "tenantId": "[parameters('tenantId')]",
          "azureADOnlyAuthentication": false
        }
      },
      "dependsOn": [
        "webApp"
      ]
    },
    "sqlFirewallAzureServices": {
      "type": "Microsoft.Sql/servers/firewallRules",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('sqlServerName'), 'AllowAllWindowsAzureIps')]",
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      },
      "dependsOn": [
        "sqlServer"
      ]
    },
    "sqlDatabase": {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2023-05-01-preview",
      "name": "[format('{0}/{1}', variables('sqlServerName'), variables('sqlDatabaseName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('currentSku').sqlDatabase.name]",
        "tier": "[variables('currentSku').sqlDatabase.tier]",
        "capacity": "[variables('currentSku').sqlDatabase.capacity]"
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": "[variables('currentSku').sqlDatabase.maxSizeBytes]",
        "catalogCollation": "SQL_Latin1_General_CP1_CI_AS",
        "zoneRedundant": "[equals(parameters('environment'), 'prod')]",
        "requestedBackupStorageRedundancy": "[if(variables('currentSku').geoRedundantBackup, 'Geo', 'Local')]"
      },
      "dependsOn": [
        "sqlServer"
      ]
    },
    "sqlDatabaseDiagnostics": {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Sql/servers/{0}/databases/{1}', variables('sqlServerName'), variables('sqlDatabaseName'))]",
      "name": "diagnostics",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]",
        "logs": [
          {
            "category": "SQLInsights",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          },
          {
            "category": "QueryStoreRuntimeStatistics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true,
            "retentionPolicy": {
              "enabled": true,
              "days": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
            }
          }
        ]
      },
      "dependsOn": [
        "logAnalytics",
        "sqlDatabase"
      ]
    },
    "keyVault": {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[parameters('tenantId')]",
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": "[equals(parameters('environment'), 'prod')]",
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    "keyVaultRoleAssignment": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')), resourceId('Microsoft.Web/sites', variables('webAppName')), 'Key Vault Secrets User')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
        "principalId": "[reference('webApp', '2022-09-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "keyVault",
        "webApp"
      ]
    },
    "sqlConnectionStringSecret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'sql-connection-string')]",
      "properties": {
        "value": "[format('Server=tcp:{0},1433;Database={1};Authentication=Active Directory Managed Identity;', reference('sqlServer').fullyQualifiedDomainName, variables('sqlDatabaseName'))]"
      },
      "dependsOn": [
        "keyVault",
        "sqlServer"
      ]
    },
    "appInsightsConnectionStringSecret": {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', variables('keyVaultName'), 'appinsights-connection-string')]",
      "properties": {
        "value": "[reference('appInsights').ConnectionString]"
      },
      "dependsOn": [
        "appInsights",
        "keyVault"
      ]
    },
    "storageAccount": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[variables('currentSku').storage]"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "publicNetworkAccess": "Enabled",
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    "storageRoleAssignment": {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', variables('storageAccountName'))]",
      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), resourceId('Microsoft.Web/sites', variables('webAppName')), 'Storage Blob Data Contributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "principalId": "[reference('webApp', '2022-09-01', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "storageAccount",
        "webApp"
      ]
    }
  },
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "metadata": {
        "description": "Web application URL"
      },
      "value": "[format('https://{0}', reference('webApp').defaultHostName)]"
    },
    "webAppName": {
      "type": "string",
      "metadata": {
        "description": "Web App name"
      },
      "value": "[variables('webAppName')]"
    },
    "webAppPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Web App principal ID (for additional role assignments)"
      },
      "value": "[reference('webApp', '2022-09-01', 'full').identity.principalId]"
    },
    "keyVaultUri": {
      "type": "string",
      "metadata": {
        "description": "Key Vault URI"
      },
      "value": "[reference('keyVault').vaultUri]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Key Vault name"
      },
      "value": "[variables('keyVaultName')]"
    },
    "sqlServerFqdn": {
      "type": "string",
      "metadata": {
        "description": "SQL Server FQDN"
      },
      "value": "[reference('sqlServer').fullyQualifiedDomainName]"
    },
    "sqlServerName": {
      "type": "string",
      "metadata": {
        "description": "SQL Server name"
      },
      "value": "[variables('sqlServerName')]"
    },
    "sqlDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "SQL Database name"
      },
      "value": "[variables('sqlDatabaseName')]"
    },
    "appInsightsConnectionString": {
      "type": "securestring",
      "metadata": {
        "description": "Application Insights connection string (sensitive)"
      },
      "value": "[reference('appInsights').ConnectionString]"
    },
    "appInsightsInstrumentationKey": {
      "type": "securestring",
      "metadata": {
        "description": "Application Insights instrumentation key (sensitive)"
      },
      "value": "[reference('appInsights').InstrumentationKey]"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage Account name"
      },
      "value": "[variables('storageAccountName')]"
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics Workspace ID"
      },
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Resource Group location"
      },
      "value": "[parameters('location')]"
    },
    "environment": {
      "type": "string",
      "metadata": {
        "description": "Environment"
      },
      "value": "[parameters('environment')]"
    },
    "estimatedMonthlyCost": {
      "type": "string",
      "metadata": {
        "description": "Estimated monthly cost (USD)"
      },
      "value": "[if(equals(parameters('environment'), 'dev'), '~$20', if(equals(parameters('environment'), 'staging'), '~$90', '~$157'))]"
    }
  }
}